<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>仇江涛的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/taokiang/blog/"/>
  <updated>2018-09-18T02:48:09.626Z</updated>
  <id>https://github.com/taokiang/blog/</id>
  
  <author>
    <name>jet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-cli开发环境实现跨域请求</title>
    <link href="https://github.com/taokiang/blog/2018/09/18/2018-09-18-01/"/>
    <id>https://github.com/taokiang/blog/2018/09/18/2018-09-18-01/</id>
    <published>2018-09-18T02:42:14.706Z</published>
    <updated>2018-09-18T02:48:09.626Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="配置config-index-js"><a href="#配置config-index-js" class="headerlink" title="配置config/index.js"></a>配置config/index.js</h2><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    dev:&#123;</span><br><span class="line">        proxyTable:&#123;//将http://172.3.2.1:8000映射为/api</span><br><span class="line">            '/api':&#123;</span><br><span class="line">                target: 'http://172.3.2.1:8000',</span><br><span class="line">secure: false,  //如果是https接口，需要配置这个参数</span><br><span class="line">                changeOrigin: true,//是否跨域</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                  '^/api': '' </span><br><span class="line">//如果本身的接口地址就有'/api'这种通用前缀，也就是说https://http://172.3.2.1:8000/api，就可以把pathRewrite删掉</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置config-index-js&quot;&gt;&lt;a href=&quot;#配置config-index-js&quot; class=&quot;headerlink&quot; title=&quot;配置config/index.js&quot;&gt;&lt;/a&gt;配置config/index.js&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/taokiang/blog/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Web页面加载，如何进行优化？</title>
    <link href="https://github.com/taokiang/blog/2018/09/07/2018-09-07/"/>
    <id>https://github.com/taokiang/blog/2018/09/07/2018-09-07/</id>
    <published>2018-09-07T08:09:57.722Z</published>
    <updated>2018-09-07T08:26:41.562Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><hr><h2 id="浏览器加载过程"><a href="#浏览器加载过程" class="headerlink" title="浏览器加载过程"></a>浏览器加载过程</h2><ol><li>建立连接过程</li></ol><ul><li>浏览器查找域名的IP地址</li><li>浏览器给web服务器发送一个HTTP请求</li><li>服务器发送永久重定向响应</li><li>浏览器跟踪重定向地址</li><li>服务器“处理”请求</li><li>服务器发回一个HTML响应</li></ul><ol start="2"><li>浏览器渲染</li></ol><ul><li>解析HTML</li><li>构建DOM树</li><li>渲染树构建</li><li>渲染树布局</li><li>绘制渲染树</li></ul><h2 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h2><ol><li>启用浏览器缓存</li></ol><p>浏览器要根据域名找出IP地址，而DNS查找过程的第一步是在浏览器缓存中查找，根据Chrome的PageSpeed给出的建议：要利用浏览器缓存存储可缓存的资源。在 HTTP 标头中为静态资源设置有效期或最长存在时间，可指示浏览器从本地磁盘中加载以前下载的资源而不是从网络中加载。<br>HTTP 1.1提供的缓存方法主要有两种：</p><ul><li>Expires和Cache-Control：max-age. 即内容在缓存中的生命有效期。第一次请求后将在生命有效期之内直接从本地缓存中拿取。</li><li>Last-Modified和ETag.：Last-Modified标记文件最后一次修改的时间，浏览器请求是在头部加入上次请求缓存下来的Last-Modified时间，若两次请求期间服务器的内容没有修改，服务器返回304 Not Modified，则不下载资源，浏览器直接使用本地缓存；否则，服务器会返回200以及更新后的版本。ETag是服务器对于文件生成的Hash散列，其生成算法与最后一次修改的时间相关。浏览器第二次请求发送上次的ETag信息，服务器通过简单的比对就知道是否应该返回304还是200。PageSpeed建议，要为资源指定Last-Modified或ETag标头，以便启动缓存验证</li></ul><ol start="2"><li>页面内容组织</li></ol><ul><li>为 HTML 文档指定字符集，可让浏览器立即开始执行脚本。</li><li>将内嵌样式块和 <link> 元素从文档主体移至文档标题，可改善显示性能。</li><li>将小型样式表或者脚本内嵌到主 HTML 网页中，可减少在下载其他资源时的往返时间 (RTT) 和延迟时间。</li><li>正确地排列外部样式表与外部和内嵌脚本的顺序，可增加下载时同时加载的数据量，并提高浏览器显示网页的速度。为确保能够并行下载这CSS 文件，始终将外部 CSS 文件排在外部 JavaScript 文件前面。</li></ul><ol start="3"><li>HTML</li></ol><ul><li>使用HTML5新标签，例如header、footer、section、nav、article。因为它们语义化，速度快，结构合理，浏览器上识别能力强。</li><li>减少HTML标签嵌套深度，嵌套越深，在移动端的Web页面渲染速度以及滚动流畅度都会有所减低。</li><li>为图片指定大小，减少重排。</li><li>压缩HTML。</li></ul><ol start="4"><li>CSS</li></ol><ul><li>使用CssSprite将零星的背景图包含到一张图中，通过background-position来使它显示在正确的位置；只请求一张图，减少了HTTP请求的次数。</li><li>模块化、精简css，提高复用率。</li><li>减少渐变、阴影的使用。</li><li>合理使用CSS3高性能动画，Translate3d支持硬件加速。</li><li>避免使用滤镜。</li><li>不使用@import。</li><li>合并和压缩CSS代码。</li></ul><ol start="5"><li>JavaScript</li></ol><ul><li>暂缓 JavaScript 解析，暂缓解析不需要的 JavaScript（等到需要执行时再进行解析），可以提高网页的初始加载速度。</li><li>使用事件委托机制，避免频繁操作DOM节点。</li><li>模块化代码：SeaJs。</li><li>合并和压缩JavaScript代码。</li><li>压缩工具：YUI Compressor或JSMin等。</li></ul><ol start="6"><li>图片优化</li></ol><ul><li>图片时页面大部分加载时间所花的地方，在图片设计的时候应该考虑相应的图片大小和格式。</li><li>压缩图片。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浏览器加载过程&quot;&gt;&lt;a href=&quot;#浏览器加载过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器加载过程&quot;&gt;&lt;/a&gt;浏览器加载过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立连接过程&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="小知识" scheme="https://github.com/taokiang/blog/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>git常用命令合集</title>
    <link href="https://github.com/taokiang/blog/2018/09/05/2018-09-05/"/>
    <id>https://github.com/taokiang/blog/2018/09/05/2018-09-05/</id>
    <published>2018-09-05T08:21:14.676Z</published>
    <updated>2018-09-11T08:03:08.845Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "xxx"                       # 配置用户名 </span><br><span class="line">git config --global user.email "xxx@xxx.com"              # 配置邮件</span><br><span class="line">git config  user.name                                     # 查看用户名 </span><br><span class="line">git config  user.email                                    # 查看邮件</span><br><span class="line"></span><br><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git remote add origin xxx [git地址]      #删除并创建远程默认仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改） </span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git pull                                                  # 本地与服务器端同步</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git reset --hard HEAD                                     # 回退到上个版本</span><br><span class="line">git reset --hard                                          # 回退到历史版本</span><br><span class="line">git log                                                   # 看你commit的日志</span><br><span class="line">git diff                                                  # 比较的是暂存区和工作区的差异</span><br><span class="line">git remote -v                                             # 查看远程仓库</span><br><span class="line">git remote rm origin                                      # 删除远程仓库</span><br><span class="line">git rm xx  # 删除xx文件</span><br><span class="line"></span><br><span class="line">git clone xxx [git地址]                                    # 克隆一份</span><br><span class="line">git checkout [name]                                       # 切换分支</span><br><span class="line">git branch [name]                                         # 创建新分支</span><br><span class="line">git checkout -b [name]                                    # 创建新分支并立即切换到新分支</span><br><span class="line">git branch -d [name]                                      # 删除分支 [-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项]</span><br><span class="line">git merge [name]                                          # 合并分支 将名称为[name]的分支与当前分支合并</span><br><span class="line">git push -u origin master                                 # 首次推送到远程默认分支  </span><br><span class="line">git push origin [name]                                    # 创建远程分支(本地分支push到远程)</span><br><span class="line">git push origin :[name] 或 gitpush origin :[name]         # 删除远程分支</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
      <category term="小知识" scheme="https://github.com/taokiang/blog/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>兰亭集序</title>
    <link href="https://github.com/taokiang/blog/2018/09/03/2018-09-03/"/>
    <id>https://github.com/taokiang/blog/2018/09/03/2018-09-03/</id>
    <published>2018-09-03T03:36:26.053Z</published>
    <updated>2018-09-03T03:53:35.700Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><hr><p><img src="https://taokiang.github.io/blog/2018/09/03/2018-09-03/lantingjixu.jpg" alt="兰亭集序"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://taokiang.github.io/blog/2018/09/03/2018-09-03/lantingjixu.jpg&quot; alt=&quot;兰亭集序&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="书法作品收藏" scheme="https://github.com/taokiang/blog/categories/%E4%B9%A6%E6%B3%95%E4%BD%9C%E5%93%81%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>前端题目汇总</title>
    <link href="https://github.com/taokiang/blog/2018/08/28/2018-8-28-1/"/>
    <id>https://github.com/taokiang/blog/2018/08/28/2018-8-28-1/</id>
    <published>2018-08-28T02:10:42.983Z</published>
    <updated>2018-09-10T08:42:55.646Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><hr><h2 id="var-let-const区别何在？"><a href="#var-let-const区别何在？" class="headerlink" title="var/let/const区别何在？"></a><strong>var/let/const区别何在？</strong></h2><h3 id="1-let添加了块级作用域"><a href="#1-let添加了块级作用域" class="headerlink" title="1. let添加了块级作用域"></a>1. let添加了块级作用域</h3><p>我们知道，JavaScript是没有块级作用域的，如果在块内使用var声明一个变量，它在代码块外面仍旧是可见的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">     var foo = 3;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);    // 3</span><br></pre></td></tr></table></figure></p><p>块级作用域，let块级变量：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true) &#123;</span><br><span class="line">     let foo = 3;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);   // Uncaught ReferenceError</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2-let约束了变量提升"><a href="#2-let约束了变量提升" class="headerlink" title="2.let约束了变量提升"></a>2.let约束了变量提升</h3><p>不管是var还是let，预编译过程中，都发生了变量提升，但与var不同的是，ES6对let进行了约束，其规定，在真正的词法变量声明之前，以任何方式访问let变量都是不允许的，所以从开发人员角度来看，let禁止了变量提升这一行为。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function hoistVariable() &#123;</span><br><span class="line">    console.log(foo); // undefined</span><br><span class="line">    var foo = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hoistVariable();</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function nonHoistingFunc() &#123;</span><br><span class="line">    console.log(foo); // Uncaught ReferenceError</span><br><span class="line">    let foo = 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nonHoistingFunc();</span><br></pre></td></tr></table></figure><p>正确的使用方式是，永远将变量声明置于当前作用域顶部</p><h3 id="3-let有暂时性死区"><a href="#3-let有暂时性死区" class="headerlink" title="3. let有暂时性死区"></a>3. let有暂时性死区</h3><p>ES6规定如果块内存在let命令，那么这个块就会成为一个封闭的作用域，并要求let变量先声明才能使用，如果在声明之前就开始使用，它并不会引用外部的变量。<br>只要在块内存在let命令，那么这个变量就绑定到了当前块作用域，不再受外部变量的影响，下面代码将会引发一个错误：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var foo = 3;</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">    foo = 5; // Uncaught ReferenceError</span><br><span class="line">    let foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-let禁止重复声明变量"><a href="#4-let禁止重复声明变量" class="headerlink" title="4. let禁止重复声明变量"></a>4. let禁止重复声明变量</h3><p>如上面所述，使用var可以重复声明变量，但let不允许在相同作用域内重复声明同一个变量，下面的代码会引发错误：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// SyntaxError</span><br><span class="line">function func() &#123;</span><br><span class="line">    let foo = 3;</span><br><span class="line">    var foo = 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SyntaxError</span><br><span class="line">function func() &#123;</span><br><span class="line">    let foo = 3;</span><br><span class="line">    let foo = 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SyntaxError</span><br><span class="line">function func(arg) &#123;</span><br><span class="line">    let arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-let不会成为全局对象的属性"><a href="#5-let不会成为全局对象的属性" class="headerlink" title="5. let不会成为全局对象的属性"></a>5. let不会成为全局对象的属性</h3><p>我们在全局范围内使用var声明一个变量时，这个变量会自动成为全局对象的属性(在浏览器和Node.js环境下，这个全局对象分别是window和global)，但let是独立存在的变量，不会成为全局对象的属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 3;</span><br><span class="line">console.log(window.a); // 3</span><br><span class="line"></span><br><span class="line">let b = 5;</span><br><span class="line">console.log(window.b); // undefined</span><br></pre></td></tr></table></figure></p><h3 id="6-最后：const命令"><a href="#6-最后：const命令" class="headerlink" title="6. 最后：const命令"></a>6. 最后：const命令</h3><p>以上let所介绍的规则均适用于const命令，不同的是，const声明的变量不能重新赋值，也是由于这个规则，const变量声明时必须初始化，不能留到以后赋值，所以下面的代码是不合法的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const a = 3;</span><br><span class="line"></span><br><span class="line">a = 5;   // Uncaught TypeError: Assignment to constant variable</span><br><span class="line"></span><br><span class="line">const b; // Uncaught SyntaxError: Missing initializer in const declaration</span><br></pre></td></tr></table></figure></p><hr><h2 id="toString-和toLocaleString-有什么区别"><a href="#toString-和toLocaleString-有什么区别" class="headerlink" title="toString()和toLocaleString()有什么区别?"></a><strong>toString()和toLocaleString()有什么区别?</strong></h2><h3 id="1-当数字是四位数及以上时，有区别，区别看以下代码"><a href="#1-当数字是四位数及以上时，有区别，区别看以下代码" class="headerlink" title="1.当数字是四位数及以上时，有区别，区别看以下代码"></a>1.当数字是四位数及以上时，有区别，区别看以下代码</h3><p>当数字是四位及以上时，toLocaleString()会让数字三位三位一分隔，像我们有时候数字也会三位一个分号<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var e=123</span><br><span class="line"> </span><br><span class="line">e.toString()</span><br><span class="line">"123"</span><br><span class="line"> </span><br><span class="line">e.toLocaleString()</span><br><span class="line">"123"</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a=1234</span><br><span class="line"></span><br><span class="line">a.toString()</span><br><span class="line">"1234"</span><br><span class="line"></span><br><span class="line">a.toLocaleString()</span><br><span class="line">"1,234"</span><br></pre></td></tr></table></figure><h3 id="2-当目标是标准时间格式时，用以上两种方法是有区别的，区别看以下代码"><a href="#2-当目标是标准时间格式时，用以上两种方法是有区别的，区别看以下代码" class="headerlink" title="2.当目标是标准时间格式时，用以上两种方法是有区别的，区别看以下代码"></a>2.当目标是标准时间格式时，用以上两种方法是有区别的，区别看以下代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var aa=[1,2,3]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">aa.toLocaleString()</span><br><span class="line">"1,2,3"</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">aa.toString()</span><br><span class="line">"1,2,3"</span><br></pre></td></tr></table></figure><p><br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var sd=new Date()</span><br><span class="line">sd</span><br><span class="line">Wed Feb 15 2017 11:21:31 GMT+0800 (CST)</span><br><span class="line"> </span><br><span class="line">sd.toLocaleString()</span><br><span class="line">"2017/2/15 上午11:21:31"</span><br><span class="line"> </span><br><span class="line">sd.toString()</span><br><span class="line">"Wed Feb 15 2017 11:21:31 GMT+0800 (CST)"</span><br></pre></td></tr></table></figure></p><h2 id="Cookie、LocalStorage与SessionStorage有什么区别"><a href="#Cookie、LocalStorage与SessionStorage有什么区别" class="headerlink" title="Cookie、LocalStorage与SessionStorage有什么区别?"></a><strong>Cookie、LocalStorage与SessionStorage有什么区别?</strong></h2><p><img src="https://taokiang.github.io/blog/2018/08/28/2018-8-28-1/三者的异同.png" alt="三者的异同"></p><h2 id="apply-与call-有什么区别"><a href="#apply-与call-有什么区别" class="headerlink" title="apply()与call()有什么区别?"></a><strong>apply()与call()有什么区别?</strong></h2><p>JavaScript中的每一个Function对象都有一个apply()方法和一个call()方法，它们的语法分别为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*apply()方法*/</span><br><span class="line">function.apply(thisObj[, argArray])</span><br><span class="line"></span><br><span class="line">/*call()方法*/</span><br><span class="line">function.call(thisObj[, arg1[, arg2[, [,...argN]]]]);</span><br></pre></td></tr></table></figure></p><p>它们各自的定义：</p><p>apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。</p><p>call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法。</p><p>它们的不同之处：</p><p>apply：最多只能有两个参数——新this对象和一个数组argArray。如果给该方法传递多个参数，则把参数都写进这个数组里面，当然，即使只有一个参数，也要写进数组里。如果argArray不是一个有效的数组或arguments对象，那么将导致一个TypeError。如果没有提供argArray和thisObj任何一个参数，那么Global对象将被用作thisObj，并且无法被传递任何参数。</p><p>call：它可以接受多个参数，第一个参数与apply一样，后面则是一串参数列表。这个方法主要用在js对象各方法相互调用的时候，使当前this实例指针保持一致，或者在特殊情况下需要改变this指针。如果没有提供thisObj参数，那么 Global 对象被用作thisObj。 </p><p><strong>实际上，apply和call的功能是一样的，只是传入的参数列表形式不同</strong></p><p>（1）基本用法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function add(a,b)&#123;</span><br><span class="line">  return a+b;  </span><br><span class="line">&#125;</span><br><span class="line">function sub(a,b)&#123;</span><br><span class="line">  return a-b;  </span><br><span class="line">&#125;</span><br><span class="line">var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法</span><br><span class="line">var a2 = sub.apply(add,[4,2]);</span><br><span class="line">alert(a1);  //6     </span><br><span class="line">alert(a2);  //2</span><br><span class="line"></span><br><span class="line">/*call的用法*/</span><br><span class="line">var a1 = add.call(sub,4,2);</span><br></pre></td></tr></table></figure></p><p>（2）实现继承<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.showName = function()&#123;</span><br><span class="line">        alert(this.name);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Cat(name)&#123;</span><br><span class="line">  Animal.apply(this,[name]);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cat = new Cat("咕咕");</span><br><span class="line">cat.showName();</span><br><span class="line"></span><br><span class="line">/*call的用法*/</span><br><span class="line">Animal.call(this,name);</span><br></pre></td></tr></table></figure></p><p>（3）多重继承<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function Class10()&#123;</span><br><span class="line">  this.showSub = function(a,b)&#123;</span><br><span class="line">        alert(a - b);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Class11()&#123;</span><br><span class="line">  this.showAdd = function(a,b)&#123;</span><br><span class="line">        alert(a + b);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Class12()&#123;</span><br><span class="line">  Class10.apply(this);</span><br><span class="line">  Class11.apply(this);   </span><br><span class="line">  // Class10.call(this);</span><br><span class="line">  //Class11.call(this);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c2 = new Class12();</span><br><span class="line">c2.showSub(3,1);    //2</span><br><span class="line">c2.showAdd(3,1);    //4</span><br></pre></td></tr></table></figure></p><p>apply的一些其他巧妙用法<br>（1）Math.max Math.min 可以实现得到数组中最大、最小的一项：<br><img src="https://taokiang.github.io/blog/2018/08/28/2018-8-28-1/738637-20160705144733717-309790212.png" alt="获取数组中的最大、最小值"><br>（2）Array.prototype.push可以实现两个数组的合并<br>同样push方法没有提供push一个数组，但是它提供了push(param1,param2…paramN)，同样也可以用apply来转换一下这个数组，即：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr1=new Array("1","2","3");</span><br><span class="line">var arr2=new Array("4","5","6");</span><br><span class="line">Array.prototype.push.apply(arr1,arr2);    //得到合并后数组的长度，因为push就是返回一个数组的长度</span><br></pre></td></tr></table></figure></p><h2 id="for-of、-for-in-、forEach有什么区别"><a href="#for-of、-for-in-、forEach有什么区别" class="headerlink" title="for of、 for in 、forEach有什么区别?"></a><strong>for of、 for in 、forEach有什么区别?</strong></h2><p>for in是ES5标准，遍历键（key）<br>for of是ES6标准，遍历值（value） 可终止循环<br>forEach是ES5标准,不能跳过或者终止循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.objCustom = function () &#123;&#125;; </span><br><span class="line">Array.prototype.arrCustom = function () &#123;&#125;;</span><br><span class="line"></span><br><span class="line">let iterable = [3, 5, 7];</span><br><span class="line">iterable.foo = "hello";</span><br><span class="line"></span><br><span class="line">for (let i in iterable) &#123;</span><br><span class="line">  console.log(i); //  0, 1, 2, "foo", "arrCustom", "objCustom"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (let i of iterable) &#123;</span><br><span class="line">  console.log(i); // 3, 5, 7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for in:</p><ul><li>数组的键名是数字，但是for…in循环是以字符串作为键名“0”、“1”、“2”等等。</li><li>for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li><li>某些情况下，for…in循环会以任意顺序遍历键名。</li></ul><p>所以for in更适合遍历对象，不要使用for in遍历数组。</p><p>for of:</p><ul><li>有着同for…in一样的简洁语法，但是没有for…in那些缺点。</li><li>不同于forEach方法，它可以与break、continue和return配合使用。</li><li>提供了遍历所有数据结构的统一操作接口。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var n of fibonacci) &#123;</span><br><span class="line">  if (n &gt; 1000)</span><br><span class="line">    break;</span><br><span class="line">  console.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="document-ready和window-onload有什么区别"><a href="#document-ready和window-onload有什么区别" class="headerlink" title="document.ready和window.onload有什么区别?"></a><strong>document.ready和window.onload有什么区别?</strong></h2><p>一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件）</p><p>二是onload，指示页面包含图片等文件在内的所有元素都加载完成。</p><h2 id="eval-和JSON-parse-有什么区别"><a href="#eval-和JSON-parse-有什么区别" class="headerlink" title="eval()和JSON.parse()有什么区别?"></a><strong>eval()和JSON.parse()有什么区别?</strong></h2><p>两种方法都能实现将一个字符串解析成json对象</p><p>区别：eval方法不会去检查给的字符串时候符合json的格式~同时如果给的字符串中存在js代码eval也会一并执行~比如如果上面的json格式的字符串改为：(注意 “age” 部分)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var data = '&#123;"student" : [&#123;"name":"鸣人","age":17&#125;, &#123;"name":"小樱","age":alert("hehe")&#125;,&#123;"name":"佐助","age":17&#125;]&#125;';</span><br></pre></td></tr></table></figure></p><p>此时执行eval方法后会先弹出一个提示框输出hehe的字符串~</p><p>但是使用JSON.parse()就会报错~显示错误信息为当前字符串不符合json格式~即JSON.parse()方法会检查需要转换的字符串是否符合json格式~</p><p>相比较而言eval方法是很危险的~特别是当涉及到第三方时我们需要确保传给eval的参数是我们可以控制的~不然里面插入比如window.location~指向一个恶意的连接~</p><p>从这个层面讲~还是推荐使用<strong>JSON.parse</strong>来实现json格式字符串的解析</p><h2 id="如何理解闭包？"><a href="#如何理解闭包？" class="headerlink" title="如何理解闭包？"></a><strong>如何理解闭包？</strong></h2><p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var count=10;   //全局作用域 标记为flag1</span><br><span class="line">function add()&#123;</span><br><span class="line">    var count=0;    //函数全局作用域 标记为flag2</span><br><span class="line">    return function()&#123;</span><br><span class="line">        count+=1;   //函数的内部作用域</span><br><span class="line">        alert(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var s = add()</span><br><span class="line">s();//输出1</span><br><span class="line">s();//输出2</span><br></pre></td></tr></table></figure></p><p>4、使用闭包的注意点</p><p>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h2 id="事件冒泡和事件捕获"><a href="#事件冒泡和事件捕获" class="headerlink" title="事件冒泡和事件捕获"></a><strong>事件冒泡和事件捕获</strong></h2><p>事件捕获阶段：事件从最上一级标签开始往下查找，直到捕获到事件目标(target)。</p><p>事件冒泡阶段：事件从事件目标(target)开始，往上冒泡直到页面的最上一级标签。</p><p>1、冒泡事件：<br>事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。通俗来讲就是，就是当设定了多个div的嵌套时；即建立了父子关系，当父div与子div共同加入了onclick事件时，当触发了子div的onclick事件后，子div进行相应的js操作，但是父div的onclick事件同样会被触发。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"测试事件冒泡"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line"></span><br><span class="line">    var $input = document.getElementsByTagName("input")[0];</span><br><span class="line"></span><br><span class="line">     var $div = document.getElementsByTagName("div")[0];</span><br><span class="line"></span><br><span class="line">     var $body = document.getElementsByTagName("body")[0];</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     $input.onclick = function(e)&#123;</span><br><span class="line"></span><br><span class="line">            this.style.border = "5px solid red"</span><br><span class="line"></span><br><span class="line">            var e = e || window.e;</span><br><span class="line"></span><br><span class="line">            alert("red")</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $div.onclick = function(e)&#123;</span><br><span class="line"></span><br><span class="line">            this.style.border = "5px solid green"</span><br><span class="line"></span><br><span class="line">            alert("green")</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $body.onclick = function(e)&#123;</span><br><span class="line"></span><br><span class="line">            this.style.border = "5px solid yellow"</span><br><span class="line"></span><br><span class="line">            alert("yellow")</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>效果：依次弹出”red“,”green”,”yellow”。这就是事件冒泡：触发button这个元素，却连同父元素绑定的事件一同触发。</p><p>2、阻止事件冒泡<br>如果对input的事件绑定改为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$input.onclick = function(e)&#123;</span><br><span class="line"></span><br><span class="line">    this.style.border = "5px solid red"</span><br><span class="line"></span><br><span class="line">    var e = e || window.e;</span><br><span class="line"></span><br><span class="line">    alert("red")</span><br><span class="line"></span><br><span class="line">    e.stopPropagation();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候只会弹出”red“，因为阻止了事件冒泡。</p><p>3、事件捕获：<br>从顶层元素到目标元素或者从目标元素到顶层元素，和事件冒泡是一个相反的过程。事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$input.addEventListener("click", function()&#123;</span><br><span class="line"></span><br><span class="line">    this.style.border = "5px solid red";</span><br><span class="line"></span><br><span class="line">    alert("red")</span><br><span class="line"></span><br><span class="line">&#125;, true)</span><br><span class="line"></span><br><span class="line">$div.addEventListener("click", function()&#123;</span><br><span class="line"></span><br><span class="line">    this.style.border = "5px solid green";</span><br><span class="line"></span><br><span class="line">    alert("green")</span><br><span class="line"></span><br><span class="line">&#125;, true)</span><br><span class="line"></span><br><span class="line">$body.addEventListener("click", function()&#123;</span><br><span class="line"></span><br><span class="line">    this.style.border = "5px solid yellow";</span><br><span class="line"></span><br><span class="line">    alert("yellow")</span><br><span class="line"></span><br><span class="line">&#125;, true)</span><br></pre></td></tr></table></figure></p><p>这个时候依次弹出”yellow“,”green”,”red”。这就是事件的捕获。</p><p>如果把addEventListener方法的第三个参数改成false，则表示只在冒泡的阶段触发，弹出的依次为：”red“,”green”,”yellow”。这是因为在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。</p><p>程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。</p><p>ele.addEventListener(‘click’,doSomething2,true)</p><p>true=捕获</p><p>false=冒泡</p><h2 id="事件委托详解"><a href="#事件委托详解" class="headerlink" title="事件委托详解"></a><strong>事件委托详解</strong></h2><p>一般做法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">    var oUl = document.getElementById("ul1");</span><br><span class="line">    var aLi = oUl.getElementsByTagName('li');</span><br><span class="line">    for(var i=0;i<span class="tag">&lt;<span class="name">aLi.length;i++)&#123;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">aLi</span>[<span class="attr">i</span>]<span class="attr">.onclick</span> = <span class="string">function()&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alert</span>(<span class="attr">123</span>);</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure></p><p>事件委托做法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"添加"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"remove"</span> <span class="attr">value</span>=<span class="string">"删除"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"move"</span> <span class="attr">value</span>=<span class="string">"移动"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">value</span>=<span class="string">"选择"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">window.onload = function()&#123;</span><br><span class="line">            var oBox = document.getElementById("box");</span><br><span class="line">            oBox.onclick = function (ev) &#123;</span><br><span class="line">                var ev = ev || window.event;</span><br><span class="line">                var target = ev.target || ev.srcElement;</span><br><span class="line">                if(target.nodeName.toLocaleLowerCase() == 'input')&#123;</span><br><span class="line">                    switch(target.id)&#123;</span><br><span class="line">                        case 'add' :</span><br><span class="line">                            alert('添加');</span><br><span class="line">                            break;</span><br><span class="line">                        case 'remove' :</span><br><span class="line">                            alert('删除');</span><br><span class="line">                            break;</span><br><span class="line">                        case 'move' :</span><br><span class="line">                            alert('移动');</span><br><span class="line">                            break;</span><br><span class="line">                        case 'select' :</span><br><span class="line">                            alert('选择');</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p><p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p><p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p><h2 id="vue中的双向数据绑定的实现"><a href="#vue中的双向数据绑定的实现" class="headerlink" title="vue中的双向数据绑定的实现"></a><strong>vue中的双向数据绑定的实现</strong></h2><p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"uName"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var obj=&#123;</span></span><br><span class="line"><span class="undefined">            pwd:"123456"</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        Object.defineProperty(obj,"userName",&#123;</span></span><br><span class="line"><span class="undefined">            get: function()&#123;</span></span><br><span class="line"><span class="undefined">                console.log("get init");</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            set: function(val)&#123;</span></span><br><span class="line"><span class="undefined">                console.log("set init");</span></span><br><span class="line"><span class="undefined">                document.getElementById("uName").innerText=val;</span></span><br><span class="line"><span class="undefined">                document.getElementById("userName").value=val;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        document.getElementById("userName").addEventListener("keyup",function()&#123;</span></span><br><span class="line"><span class="undefined">            obj.userName=event.target.value;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;var-let-const区别何在？&quot;&gt;&lt;a href=&quot;#var-let-const区别何在？&quot; class=&quot;headerlink&quot; title=&quot;var/let/const区别何在？&quot;&gt;&lt;/a&gt;&lt;strong&gt;var/let/const区别何在？&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-let添加了块级作用域&quot;&gt;&lt;a href=&quot;#1-let添加了块级作用域&quot; class=&quot;headerlink&quot; title=&quot;1. let添加了块级作用域&quot;&gt;&lt;/a&gt;1. let添加了块级作用域&lt;/h3&gt;&lt;p&gt;我们知道，JavaScript是没有块级作用域的，如果在块内使用var声明一个变量，它在代码块外面仍旧是可见的&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var foo = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(foo);    // 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;块级作用域，let块级变量：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     let foo = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(foo);   // Uncaught ReferenceError&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>SASS规范</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-7/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-7/</id>
    <published>2018-08-27T11:23:04.117Z</published>
    <updated>2018-08-28T06:04:34.957Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h4 id="语法选用"><a href="#语法选用" class="headerlink" title="语法选用"></a>语法选用</h4><p>SASS有两种语法格式，一种是 SCSS (Sassy CSS)，另一种是缩进格式（Indented Syntax），有时称之为 Sass。</p><h5 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h5><p>SCSS语法基于 CSS 语法扩展，每一个有效的 CSS 文件都是一个有效的具有相同含义的 SCSS 文件，换种说法就是 SCSS 能识别大多数的 CSS hacks 写法和浏览器前缀写法以及早期的 IE 滤镜写法，这种格式以 .scss 作为扩展名。</p><h5 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h5><p>Sass 使用 “缩进” 代替 “花括号” 表示属性属于某个选择器，用 “换行” 代替 “分号” 分隔属性，很多人认为这样做比 SCSS 更容易阅读，书写也更快速。缩进格式也可以使用 Sass 的全部功能，只是与 SCSS 相比个别地方采取了不同的表达方式，具体请查看 <a href="http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html" target="_blank" rel="noopener">the indented syntax reference</a>。这种格式以 .sass 作为拓展名。</p><p>更详细的用法请阅读 <a href="https://www.sass.hk/" target="_blank" rel="noopener">SASS中文文档</a></p><h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><h3 id="考虑到-SCSS-语法对-CSS-语法友好的兼容性和扩展性，我们在使用-SASS-编写样式的时候，统一使用-SCSS-语法"><a href="#考虑到-SCSS-语法对-CSS-语法友好的兼容性和扩展性，我们在使用-SASS-编写样式的时候，统一使用-SCSS-语法" class="headerlink" title="考虑到 SCSS 语法对 CSS 语法友好的兼容性和扩展性，我们在使用 SASS 编写样式的时候，统一使用 SCSS 语法"></a><code>考虑到 SCSS 语法对 CSS 语法友好的兼容性和扩展性，我们在使用 SASS 编写样式的时候，统一使用 SCSS 语法</code></h3><h4 id="SASS注释规范"><a href="#SASS注释规范" class="headerlink" title="SASS注释规范"></a>SASS注释规范</h4><p>SASS支持 CSS 标准的多行注释 <code>/* */</code>，同时也支持单行注释 <code>//</code>。</p><ul><li>多行注释在使用非 Compressed 模式进行编译后的输出文件中会保留下来，单行注释 <code>//</code> 侧会被移除</li><li>多行注释和单行注释在 SASS 编译后输出的压缩 CSS 文件都会被移除</li><li>当多行注释内容第一个字符是感叹号 “!” 的时候，即 <code>/*! */</code>，SASS 无论用哪一种编译方式编译注释都会保留</li><li>注释内容可以加入 SASS 变量</li></ul><p>###团队约定</p><p>SCSS 文件内</p><ul><li><code>全部遵循 CSS 注释规范</code></li><li><code>不使用 /*! */ 注释方式</code></li><li><code>注释内不放 SASS 变量</code></li></ul><p>标准的注释规范如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@charset &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc File Info</span><br><span class="line"> * @author liqinuo</span><br><span class="line"> * @date 2015-10-10</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* Module A</span><br><span class="line">----------------------------------------------------------------*/</span><br><span class="line">.mod_a &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* module A logo */</span><br><span class="line">.mod_a_logo &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* module A nav */</span><br><span class="line">.mod_a_nav &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* Module B</span><br><span class="line">----------------------------------------------------------------*/</span><br><span class="line">.mod_b &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* module B logo */</span><br><span class="line">.mod_b_logo &#123;&#125;</span><br><span class="line"></span><br><span class="line">/* module B nav */</span><br><span class="line">.mod_b_nav &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套规范"><a href="#嵌套规范" class="headerlink" title="嵌套规范"></a>嵌套规范</h4><h5 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">body .jdc &#123;&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    body &amp; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">.jdc_cover &#123;&#125;</span><br><span class="line">.jdc_info &#123;&#125;</span><br><span class="line">.jdc_info_name &#123;&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    &amp;_cover &#123;&#125;</span><br><span class="line">    &amp;_info &#123;</span><br><span class="line">        &amp;_name &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-image: url(/img/icon.png);</span><br><span class="line">    background-position: 0 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    background: &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        repeat: no-repeat;</span><br><span class="line">        image: url(/img/icon.png);</span><br><span class="line">        position: 0 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>可复用属性尽量抽离为页面变量，易于统一维护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    border-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">$color: red;</span><br><span class="line">.jdc &#123;</span><br><span class="line">    color: $color;</span><br><span class="line">    border-color: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混合-mixin"><a href="#混合-mixin" class="headerlink" title="混合(mixin)"></a>混合(mixin)</h4><p>根据功能定义模块，然后在需要使用的地方通过 <code>@include</code> 调用，避免编码时重复输入代码段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">@mixin radius($radius:5px) &#123;</span><br><span class="line">    -webkit-border-radius: $radius;</span><br><span class="line">    border-radius: $radius;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    @include radius; //参数使用默认值</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    @include radius(10px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// CSS</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    background: url(/img/icon.png) no-repeat -10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    background: url(/img/icon.png) no-repeat -20px 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SCSS</span><br><span class="line">@mixin icon($x:0, $y:0) &#123;</span><br><span class="line">    background: url(/img/icon.png) no-repeat $x, $y;</span><br><span class="line">&#125;</span><br><span class="line">.jdc_1 &#123;</span><br><span class="line">    @include icon(-10px, 0);</span><br><span class="line">&#125;</span><br><span class="line">.jdc_2 &#123;</span><br><span class="line">    @include icon(-20px, 0);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">#### 占位选择器 %</span><br><span class="line"></span><br><span class="line">如果不调用则不会有任何多余的 css 文件，占位选择器以 `%` 标识定义，通过 `@extend` 调用</span><br></pre></td></tr></table></figure><p>//scss<br>%borderbox {<br>    -webkit-box-sizing: border-box;<br>    box-sizing: border-box;<br>}<br>.jdc {<br>    @extend %borderbox;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### @extend 继承</span><br></pre></td></tr></table></figure></p><p>// CSS<br>.jdc_1 {<br>    font-size: 12px;<br>    color: red;<br>}<br>.jdc_2 {<br>    font-size: 12px;<br>    color: red;<br>    font-weight: bold;<br>}</p><p>// SCSS<br>.jdc_1 {<br>    font-size: 12px;<br>    color: red;<br>}<br>.jdc_2 {<br>    @extend .jdc_1;<br>    font-weight: bold;<br>}</p><p>// 或者<br>%font_red {<br>    font-size: 12px;<br>    color: red;<br>}<br>.jdc_1 {<br>    @extend %font_red;<br>}<br>.jdc_2 {<br>    @extend %font_red;<br>    font-weight: bold;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### @for 循环</span><br></pre></td></tr></table></figure></p><p>// CSS<br>.jdc_1 {background-position: 0 -20px;}<br>.jdc_2 {background-position: 0 -40px;}<br>.jdc_3 {background-position: 0 -60px;}</p><p>// SCSS<br>@for $i from 1 through 3 {<br>    .jdc_#{$i} {<br>        background-position: 0 (-20px) * $i;<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：`#&#123;&#125;` 是连接符，变量连接使用时需要依赖</span><br><span class="line"></span><br><span class="line">#### @each 循环</span><br></pre></td></tr></table></figure></p><p>// CSS<br>.jdc_list {<br>    background-image: url(/img/jdc_list.png);<br>}<br>.jdc_detail {<br>    background-image: url(/img/jdc_detail.png);<br>}</p><p>// SCSS<br>@each $name in list, detail {<br>    .jdc_#{$name} {<br>        background-image: url(/img/jdc_#{$name}.png);<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>// CSS<br>.jdc_list {<br>    background-image: url(/img/jdc_list.png);<br>    background-color: red;<br>}<br>.jdc_detail {<br>    background-image: url(/img/jdc_detail.png);<br>    background-color: blue;<br>}</p><p>// SCSS<br>@each $name, $color in (list, red), (detail, blue) {<br>    .jdc_#{$name} {<br>        background-image: url(/img/jdc_#{$name}.png);<br>        background-color: $color;<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### @function 函数</span><br></pre></td></tr></table></figure></p><p>@function pxToRem($px) {<br>    @return $px / 10px * 1rem;<br>}<br>.jdc {<br>    font-size: pxToRem(12px);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 运算规范</span><br><span class="line"></span><br><span class="line">运算符之间空出一个空格</span><br></pre></td></tr></table></figure></p><p>.jdc {<br>    width: 100px - 50px;<br>    height: 30px / 5;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意运算单位，单位同时参与运算，所以 10px 不等于 10，乘除运算时需要特别注意</span><br></pre></td></tr></table></figure></p><p>// 正确的运算格式<br>.jdc {<br>    width: 100px - 50px;<br>    width: 100px + 50px;<br>    width: 100px * 2;<br>    width: 100px / 2;<br>}<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;语法选用&quot;&gt;&lt;a href=&quot;#语法选用&quot; class=&quot;headerlink&quot; title=&quot;语法选用&quot;&gt;&lt;/a&gt;语法选用&lt;/h4&gt;&lt;p&gt;SASS有两种语法格式，一种是 SCSS (Sassy CSS)，另一种是缩进格式（Indented
      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript编码规范</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-6/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-6/</id>
    <published>2018-08-27T11:20:51.178Z</published>
    <updated>2018-08-27T11:25:54.478Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>项目是以团队为单位，代码规范应同出一门。<br>本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p><h3 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h3><h4 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h4><h5 id="建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] JavaScript 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h5 id="建议-在文件结尾处，保留一个空行。"><a href="#建议-在文件结尾处，保留一个空行。" class="headerlink" title="[建议] 在文件结尾处，保留一个空行。"></a>[建议] 在文件结尾处，保留一个空行。</h5><h3 id="2-2-结构"><a href="#2-2-结构" class="headerlink" title="2.2 结构"></a>2.2 结构</h3><h4 id="2-2-1-缩进"><a href="#2-2-1-缩进" class="headerlink" title="2.2.1 缩进"></a>2.2.1 缩进</h4><h5 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a><code>[强制]</code> 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id="强制-switch-下的-case-和-default-必须增加一个缩进层级。"><a href="#强制-switch-下的-case-和-default-必须增加一个缩进层级。" class="headerlink" title="[强制] switch 下的 case 和 default 必须增加一个缩进层级。"></a><code>[强制]</code> switch 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-空格"><a href="#2-2-2-空格" class="headerlink" title="2.2.2 空格"></a>2.2.2 空格</h4><h5 id="强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"><a href="#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。" class="headerlink" title="[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"></a><code>[强制]</code> 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !arr.length;</span><br><span class="line">a++;</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure><h5 id="强制-用作代码块起始的左花括号-前必须有一个空格。"><a href="#强制-用作代码块起始的左花括号-前必须有一个空格。" class="headerlink" title="[强制] 用作代码块起始的左花括号 { 前必须有一个空格。"></a><code>[强制]</code> 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。"><a href="#强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。" class="headerlink" title="[强制] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。"></a><code>[强制]</code> <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h5 id="强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。"><a href="#强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。" class="headerlink" title="[强制] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。"></a><code>[强制]</code> 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c :<span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。"><a href="#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。" class="headerlink" title="[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。"></a><code>[强制]</code> 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName ();</span><br></pre></td></tr></table></figure><h5 id="强制-和-前不允许有空格。"><a href="#强制-和-前不允许有空格。" class="headerlink" title="[强制] , 和 ; 前不允许有空格。"></a><code>[强制]</code> <code>,</code> 和 <code>;</code> 前不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">callFunc(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line">callFunc(a , b) ;</span><br></pre></td></tr></table></figure><h5 id="强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。"><a href="#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。" class="headerlink" title="[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。"></a><code>[强制]</code> 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncream &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"></span><br><span class="line">callFunc( param1, param2, param3 );</span><br><span class="line"></span><br><span class="line">save( <span class="keyword">this</span>.list[ <span class="keyword">this</span>.indexes[ i ] ] );</span><br><span class="line"></span><br><span class="line">needIncreament &amp;&amp; ( variable += increament );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( num &gt; list.length ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( len-- ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。"><a href="#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。" class="headerlink" title="[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。"></a><code>[强制]</code> 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p><p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [ ];</span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-行尾不得有多余的空格。"><a href="#强制-行尾不得有多余的空格。" class="headerlink" title="[强制] 行尾不得有多余的空格。"></a><code>[强制]</code> 行尾不得有多余的空格。</h5><h4 id="2-2-3-换行"><a href="#2-2-3-换行" class="headerlink" title="2.2.3 换行"></a>2.2.3 换行</h4><h5 id="强制-每个独立语句结束后必须换行。"><a href="#强制-每个独立语句结束后必须换行。" class="headerlink" title="[强制] 每个独立语句结束后必须换行。"></a><code>[强制]</code> 每个独立语句结束后必须换行。</h5><h5 id="强制-每行不得超过-120-个字符。"><a href="#强制-每行不得超过-120-个字符。" class="headerlink" title="[强制] 每行不得超过 120 个字符。"></a><code>[强制]</code> 每行不得超过 <code>120</code> 个字符。</h5><p>解释：</p><p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p><h5 id="强制-运算符处换行时，运算符必须在新行的行首。"><a href="#强制-运算符处换行时，运算符必须在新行的行首。" class="headerlink" title="[强制] 运算符处换行时，运算符必须在新行的行首。"></a><code>[强制]</code> 运算符处换行时，运算符必须在新行的行首。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3</span><br><span class="line">    + number4 + number5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">'admin'</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">'add-admin'</span>) ||</span><br><span class="line">    user.hasAuthority(<span class="string">'delete-admin'</span>)) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3 +</span><br><span class="line">    number4 + number5;</span><br></pre></td></tr></table></figure><h5 id="强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。"><a href="#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。" class="headerlink" title="[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行。"></a><code>[强制]</code> 在函数声明、函数表达式、函数调用、对象创建、数组创建、<code>for</code> 语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument</span><br><span class="line">    , anotherVeryLongArgument</span><br><span class="line">    , callback</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。"><a href="#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。" class="headerlink" title="[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element.style[property] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。"><a href="#建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。" class="headerlink" title="[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。"></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></span><br><span class="line"><span class="comment">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 `if` 内语句块能容易视觉辨识。</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></span><br><span class="line"><span class="comment">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></span><br><span class="line"><span class="comment">// 特别的，对于 HTML 片段的拼接，通过缩进，保持和 HTML 相同的结构。</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">''</span> <span class="comment">// 此处用一个空字符串，以便整个 HTML 片段都在新行严格对齐</span></span><br><span class="line">    + <span class="string">'&lt;article&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></span><br><span class="line">    + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可使用数组来进行拼接，相对 `+` 更容易调整缩进。</span></span><br><span class="line"><span class="keyword">var</span> html = [</span><br><span class="line">    <span class="string">'&lt;article&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/article&gt;'</span></span><br><span class="line">];</span><br><span class="line">html = html.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></span><br><span class="line"><span class="comment">// 所有参数必须增加一个缩进。</span></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以按逻辑对参数进行组合。</span></span><br><span class="line"><span class="comment">// 最经典的是 baidu.format 函数，调用时将参数分为“模板”和“数据”两块</span></span><br><span class="line">baidu.format(</span><br><span class="line">    dateFormatTemplate,</span><br><span class="line">    year, month, date, hour, minute, second</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></span><br><span class="line"><span class="comment">// 这通常出现在匿名函数或者对象初始化等作为参数时，如 `setTimeout` 函数等。</span></span><br><span class="line">setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">200</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">order.data.read(</span><br><span class="line">    <span class="string">'id='</span> + me.model.id,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        me.attchToModel(data.result);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">300</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用较长时采用缩进进行调整。</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">    .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></span><br><span class="line"><span class="keyword">var</span> result = thisIsAVeryVeryLongCondition</span><br><span class="line">    ? resultA : resultB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = condition</span><br><span class="line">    ? thisIsAVeryVeryLongResult</span><br><span class="line">    : resultB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组和对象初始化的混用，严格按照每个对象的 `&#123;` 和结束 `&#125;` 在独立一行的风格书写。</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。"><a href="#建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。" class="headerlink" title="[建议] 对于 if...else...、try...catch...finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。"></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-语句"><a href="#2-2-4-语句" class="headerlink" title="2.2.4 语句"></a>2.2.4 语句</h4><h5 id="强制-不得省略语句结束的分号。"><a href="#强制-不得省略语句结束的分号。" class="headerlink" title="[强制] 不得省略语句结束的分号。"></a><code>[强制]</code> 不得省略语句结束的分号。</h5><h5 id="强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。"><a href="#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。" class="headerlink" title="[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。"></a><code>[强制]</code> 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    callFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者 condition &amp;&amp; callFunc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    callFunc();</span><br></pre></td></tr></table></figure><h5 id="强制-函数定义结束不允许添加分号。"><a href="#强制-函数定义结束不允许添加分号。" class="headerlink" title="[强制] 函数定义结束不允许添加分号。"></a><code>[强制]</code> 函数定义结束不允许添加分号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。"><a href="#强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。" class="headerlink" title="[强制] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 (。"></a><code>[强制]</code> <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5><p>解释：</p><p>IIFE = Immediately-Invoked Function Expression.</p><p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Code</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-命名"><a href="#2-3-命名" class="headerlink" title="2.3 命名"></a>2.3 命名</h3><h5 id="强制-变量-使用-Camel命名法。"><a href="#强制-变量-使用-Camel命名法。" class="headerlink" title="[强制] 变量 使用 Camel命名法。"></a><code>[强制]</code> <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a><code>[强制]</code> <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> INITIAL_NAME = <span class="string">"INITIAL_NAME"</span>;</span><br></pre></td></tr></table></figure><h5 id="强制-函数-使用-Camel命名法。"><a href="#强制-函数-使用-Camel命名法。" class="headerlink" title="[强制] 函数 使用 Camel命名法。"></a><code>[强制]</code> <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-函数的-参数-使用-Camel命名法。"><a href="#强制-函数的-参数-使用-Camel命名法。" class="headerlink" title="[强制] 函数的 参数 使用 Camel命名法。"></a><code>[强制]</code> 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类-使用-Pascal命名法。（即每一个单词的首字母都采用大写字母的命名格式）"><a href="#强制-类-使用-Pascal命名法。（即每一个单词的首字母都采用大写字母的命名格式）" class="headerlink" title="[强制] 类 使用 Pascal命名法。（即每一个单词的首字母都采用大写字母的命名格式）"></a><code>[强制]</code> <code>类</code> 使用 <code>Pascal命名法</code>。（即每一个单词的首字母都采用大写字母的命名格式）</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类的-方法-属性-使用-Camel命名法。"><a href="#强制-类的-方法-属性-使用-Camel命名法。" class="headerlink" title="[强制] 类的 方法 / 属性 使用 Camel命名法。"></a><code>[强制]</code> 类的 <code>方法</code> / <code>属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a><code>[强制]</code> <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">    READING: <span class="number">1</span>,</span><br><span class="line">    READED: <span class="number">2</span>,</span><br><span class="line">    APPLIED: <span class="number">3</span>,</span><br><span class="line">    READY: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-命名空间-使用-Camel命名法。"><a href="#强制-命名空间-使用-Camel命名法。" class="headerlink" title="[强制] 命名空间 使用 Camel命名法。"></a><code>[强制]</code> <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"><a href="#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。" class="headerlink" title="[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"></a><code>[强制]</code> 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure><h5 id="强制-类名-使用-名词。"><a href="#强制-类名-使用-名词。" class="headerlink" title="[强制] 类名 使用 名词。"></a><code>[强制]</code> <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-函数名-使用-动宾短语。即“望文知义”"><a href="#建议-函数名-使用-动宾短语。即“望文知义”" class="headerlink" title="[建议] 函数名 使用 动宾短语。即“望文知义”"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。<code>即“望文知义”</code></h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-boolean-类型的变量使用-is-或-has-开头。"><a href="#建议-boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="[建议] boolean 类型的变量使用 is 或 has 开头。"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-Promise对象-用-动宾短语的进行时-表达。即命名时要“望文知义”-以便更好记忆和理解。"><a href="#建议-Promise对象-用-动宾短语的进行时-表达。即命名时要“望文知义”-以便更好记忆和理解。" class="headerlink" title="[建议] Promise对象 用 动宾短语的进行时 表达。即命名时要“望文知义”,以便更好记忆和理解。"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。即命名时要<code>“望文知义”</code>,以便更好记忆和理解。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure><h3 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h3><h4 id="2-4-1-单行注释"><a href="#2-4-1-单行注释" class="headerlink" title="2.4.1 单行注释"></a>2.4.1 单行注释</h4><h5 id="强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。"><a href="#强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。" class="headerlink" title="[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。"></a><code>[强制]</code> 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5><h4 id="2-4-2-多行注释"><a href="#2-4-2-多行注释" class="headerlink" title="2.4.2 多行注释"></a>2.4.2 多行注释</h4><h5 id="建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。"><a href="#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。" class="headerlink" title="[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id="2-4-3-文档化注释"><a href="#2-4-3-文档化注释" class="headerlink" title="2.4.3 文档化注释"></a>2.4.3 文档化注释</h4><h5 id="强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。"><a href="#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。" class="headerlink" title="[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。"></a><code>[强制]</code> 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p><ol><li>文件</li><li>namespace</li><li>类</li><li>函数或方法</li><li>类属性</li><li>事件</li><li>全局变量</li><li>常量</li><li>AMD 模块</li></ol><h5 id="强制-文档注释前必须空一行。"><a href="#强制-文档注释前必须空一行。" class="headerlink" title="[强制] 文档注释前必须空一行。"></a>[强制] 文档注释前必须空一行。</h5><h5 id="建议-自文档化的文档说明-what，而不是-how。"><a href="#建议-自文档化的文档说明-what，而不是-how。" class="headerlink" title="[建议] 自文档化的文档说明 what，而不是 how。"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id="2-4-4-类型定义"><a href="#2-4-4-类型定义" class="headerlink" title="2.4.4 类型定义"></a>2.4.4 类型定义</h4><h5 id="强制-类型定义都是以-开始-以-结束。"><a href="#强制-类型定义都是以-开始-以-结束。" class="headerlink" title="[强制] 类型定义都是以 { 开始, 以 } 结束。"></a><code>[强制]</code> 类型定义都是以 <code>{</code> 开始, 以 <code>}</code> 结束。</h5><p>解释：</p><p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p><p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p><h5 id="强制-对于基本类型-string-number-boolean-，首字母必须小写。"><a href="#强制-对于基本类型-string-number-boolean-，首字母必须小写。" class="headerlink" title="[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。"></a><code>[强制]</code> 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table><thead><tr><th>类型定义</th><th>语法示例</th><th>解释</th></tr></thead><tbody><tr><td>String</td><td>{string}</td><td>–</td></tr><tr><td>Number</td><td>{number}</td><td>–</td></tr><tr><td>Boolean</td><td>{boolean}</td><td>–</td></tr><tr><td>Object</td><td>{Object}</td><td>–</td></tr><tr><td>Function</td><td>{Function}</td><td>–</td></tr><tr><td>RegExp</td><td>{RegExp}</td><td>–</td></tr><tr><td>Array</td><td>{Array}</td><td>–</td></tr><tr><td>Date</td><td>{Date}</td><td>–</td></tr><tr><td>单一类型集合</td><td>{Array.&lt;string&gt;}</td><td>string 类型的数组</td></tr><tr><td>多类型</td><td>{(number｜boolean)}</td><td>可能是 number 类型, 也可能是 boolean 类型</td></tr><tr><td>允许为null</td><td>{?number}</td><td>可能是 number, 也可能是 null</td></tr><tr><td>不允许为null</td><td>{!Object}</td><td>Object 类型, 但不是 null</td></tr><tr><td>Function类型</td><td>{function(number, boolean)}</td><td>函数, 形参类型</td></tr><tr><td>Function带返回值</td><td>{function(number, boolean):string}</td><td>函数, 形参, 返回值类型</td></tr><tr><td>Promise</td><td>Promise.&lt;resolveType, rejectType&gt;</td><td>Promise，成功返回的数据类型，失败返回的错误类型</td></tr><tr><td>参数可选</td><td>@param {string=} name</td><td>可选参数, =为类型后缀</td></tr><tr><td>可变参数</td><td>@param {…number} args</td><td>变长参数,  …为类型前缀</td></tr><tr><td>任意类型</td><td>{*}</td><td>任意类型</td></tr><tr><td>可选任意类型</td><td>@param {*=} name</td><td>可选参数，类型不限</td></tr><tr><td>可变任意类型</td><td>@param {…*} args</td><td>变长参数，类型不限</td></tr></tbody></table><h4 id="2-4-5-文件注释"><a href="#2-4-5-文件注释" class="headerlink" title="2.4.5 文件注释"></a>2.4.5 文件注释</h4><h5 id="强制-文件顶部必须包含文件注释，用-file-标识文件说明。"><a href="#强制-文件顶部必须包含文件注释，用-file-标识文件说明。" class="headerlink" title="[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。"></a><code>[强制]</code> 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="强制-文件注释中可以用-author-标识开发者信息。"><a href="#强制-文件注释中可以用-author-标识开发者信息。" class="headerlink" title="[强制] 文件注释中可以用 @author 标识开发者信息。"></a><code>[强制]</code> 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5><p>解释：</p><p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p><p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p><p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p><p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p><p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> * @author author-name(mail-name@domain.com)</span></span><br><span class="line"><span class="comment"> *         author-name2(mail-name2@domain.com)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="2-4-6-命名空间注释"><a href="#2-4-6-命名空间注释" class="headerlink" title="2.4.6 命名空间注释"></a>2.4.6 命名空间注释</h4><h5 id="建议-命名空间使用-namespace-标识。"><a href="#建议-命名空间使用-namespace-标识。" class="headerlink" title="[建议] 命名空间使用 @namespace 标识。"></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> util = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-7-类注释"><a href="#2-4-7-类注释" class="headerlink" title="2.4.7 类注释"></a>2.4.7 类注释</h4><h5 id="建议-使用-class-标记类或构造函数。"><a href="#建议-使用-class-标记类或构造函数。" class="headerlink" title="[建议] 使用 @class 标记类或构造函数。"></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5><p>解释：</p><p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-extends-标记类的继承信息。"><a href="#建议-使用-extends-标记类的继承信息。" class="headerlink" title="[建议] 使用 @extends 标记类的继承信息。"></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br></pre></td></tr></table></figure><h5 id="强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。"><a href="#强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。" class="headerlink" title="[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。"></a><code>[强制]</code> 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5><p>解释：</p><p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.extend(</span><br><span class="line">    Fronteer.prototype,</span><br><span class="line">    <span class="comment">/** @lends Fronteer.prototype */</span>&#123;</span><br><span class="line">        getLevel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="强制-类的属性或方法等成员信息不是-public-的，应使用-protected-或-private-标识可访问性。"><a href="#强制-类的属性或方法等成员信息不是-public-的，应使用-protected-或-private-标识可访问性。" class="headerlink" title="[强制] 类的属性或方法等成员信息不是 public 的，应使用 @protected 或 @private 标识可访问性。"></a><code>[强制]</code> 类的属性或方法等成员信息不是 <code>public</code> 的，应使用 <code>@protected</code> 或 <code>@private</code> 标识可访问性。</h5><p>解释：</p><p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Fronteer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性描述</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.level = <span class="string">'T12'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Fronteer.prototype.getLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-8-函数-方法注释"><a href="#2-4-8-函数-方法注释" class="headerlink" title="2.4.8 函数/方法注释"></a>2.4.8 函数/方法注释</h4><h5 id="强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"><a href="#强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。" class="headerlink" title="[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"></a><code>[强制]</code> 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5><p>解释：</p><p>当 <code>return</code> 关键字仅作退出函数/方法使用时，无须对返回值作注释标识。</p><h5 id="强制-参数和返回值注释必须包含类型信息，且不允许省略参数的说明。"><a href="#强制-参数和返回值注释必须包含类型信息，且不允许省略参数的说明。" class="headerlink" title="[强制] 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。"></a><code>[强制]</code> 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。</h5><h5 id="建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。"><a href="#建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。" class="headerlink" title="[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。"></a><code>[建议]</code> 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p1 参数1的说明</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p2 参数2的说明，比较长</span></span><br><span class="line"><span class="comment"> *     那就换行了.</span></span><br><span class="line"><span class="comment"> * @param &#123;number=&#125; p3 参数3的说明（可选）</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, p3</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        p1: p1,</span><br><span class="line">        p2: p2,</span><br><span class="line">        p3: p3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-对-Object-中各项的描述，-必须使用-param-标识。"><a href="#强制-对-Object-中各项的描述，-必须使用-param-标识。" class="headerlink" title="[强制] 对 Object 中各项的描述， 必须使用 @param 标识。"></a><code>[强制]</code> 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; option 参数描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; option.url option项描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string=&#125; option.method option项描述，可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。"><a href="#建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。" class="headerlink" title="[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param、@return，仅用 @override 标识，否则仍应作完整注释。"></a><code>[建议]</code> 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5><p>解释：</p><p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p><h4 id="2-4-9-事件注释"><a href="#2-4-9-事件注释" class="headerlink" title="2.4.9 事件注释"></a>2.4.9 事件注释</h4><h5 id="强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。"><a href="#强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。" class="headerlink" title="[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。"></a><code>[强制]</code> 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 值变更时触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @event Select#change</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.fire(</span><br><span class="line">    <span class="string">'change'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        before: <span class="string">'foo'</span>,</span><br><span class="line">        after: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。"><a href="#强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。" class="headerlink" title="[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。"></a><code>[强制]</code> 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5><h5 id="建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。"><a href="#建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。" class="headerlink" title="[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。"></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-10-常量注释"><a href="#2-4-10-常量注释" class="headerlink" title="2.4.10 常量注释"></a>2.4.10 常量注释</h4><h5 id="强制-常量必须使用-const-标记，并包含说明和类型信息。"><a href="#强制-常量必须使用-const-标记，并包含说明和类型信息。" class="headerlink" title="[强制] 常量必须使用 @const 标记，并包含说明和类型信息。"></a><code>[强制]</code> 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @const</span></span><br><span class="line"><span class="comment"> * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> REQUEST_URL = <span class="string">'myurl.do'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-11-复杂类型注释"><a href="#2-4-11-复杂类型注释" class="headerlink" title="2.4.11 复杂类型注释"></a>2.4.11 复杂类型注释</h4><h5 id="建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。"><a href="#建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。" class="headerlink" title="[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。"></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @typedef &#123;Object&#125; namespaceA~Server</span></span><br><span class="line"><span class="comment"> * @property &#123;string&#125; host 主机</span></span><br><span class="line"><span class="comment"> * @property &#123;number&#125; port 端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> servers = [</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.4'</span>,</span><br><span class="line">        port: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.5'</span>,</span><br><span class="line">        port: <span class="number">8081</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="2-4-12-AMD-模块注释"><a href="#2-4-12-AMD-模块注释" class="headerlink" title="2.4.12 AMD 模块注释"></a>2.4.12 AMD 模块注释</h4><h5 id="强制-AMD-模块使用-module-或-exports-标识。"><a href="#强制-AMD-模块使用-module-或-exports-标识。" class="headerlink" title="[强制] AMD 模块使用 @module 或 @exports 标识。"></a><code>[强制]</code> AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5><p>解释：</p><p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * foo description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @exports Foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> foo = &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * baz description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return &#123;boolean&#125; return description</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        foo.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也可以在 exports 变量前使用 @module 标识：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * module description.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @module foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果直接使用 factory 的 exports 参数，还可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module description.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @module</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。"><a href="#强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。" class="headerlink" title="[强制] 对于已使用 @module 标识为 AMD模块 的引用，在 namepaths 中必须增加 module: 作前缀。"></a><code>[强制]</code> 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5><p>解释：</p><p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires module:Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event module:Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对于类定义的模块，可以使用-alias-标识构建函数。"><a href="#建议-对于类定义的模块，可以使用-alias-标识构建函数。" class="headerlink" title="[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。"></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A module representing a jacket.</span></span><br><span class="line"><span class="comment"> * @module jacket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @class</span></span><br><span class="line"><span class="comment">         * @alias module:jacket</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> Jacket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jacket;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-多模块定义时，可以使用-exports-标识各个模块。"><a href="#建议-多模块定义时，可以使用-exports-标识各个模块。" class="headerlink" title="[建议] 多模块定义时，可以使用 @exports 标识各个模块。"></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one module</span></span><br><span class="line">define(<span class="string">'html/utils'</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Utility functions to ease working with DOM elements.</span></span><br><span class="line"><span class="comment">     * @exports html/utils</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// another module</span></span><br><span class="line">define(<span class="string">'tag'</span>,</span><br><span class="line">    <span class="comment">/** @exports tag */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-对于-exports-为-Object-的模块，可以使用-namespace标识。"><a href="#建议-对于-exports-为-Object-的模块，可以使用-namespace标识。" class="headerlink" title="[建议] 对于 exports 为 Object 的模块，可以使用@namespace标识。"></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5><p>解释：</p><p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p><h5 id="建议-对于-exports-为类名的模块，使用-class-和-exports-标识。"><a href="#建议-对于-exports-为类名的模块，使用-class-和-exports-标识。" class="headerlink" title="[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。"></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></span><br><span class="line"><span class="comment">// 另外需要注意类名需要使用 var 定义的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bar description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see foo</span></span><br><span class="line"><span class="comment"> * @exports  Bar</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * baz description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return &#123;(string|Array)&#125; return description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Bar.prototype.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-4-13-细节注释"><a href="#2-4-13-细节注释" class="headerlink" title="2.4.13 细节注释"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p><h4 id="建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"><a href="#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。" class="headerlink" title="[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, opt_p3</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></span><br><span class="line">    <span class="comment">// 说明太长需要换行</span></span><br><span class="line">    <span class="keyword">for</span> (...) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："><a href="#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：" class="headerlink" title="[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："></a><code>[强制]</code> 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p><ol><li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li><li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li><li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li><li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li></ol><h2 id="3-语言特性"><a href="#3-语言特性" class="headerlink" title="3 语言特性"></a>3 语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><h5 id="强制-变量、函数在使用前必须先定义。"><a href="#强制-变量、函数在使用前必须先定义。" class="headerlink" title="[强制] 变量、函数在使用前必须先定义。"></a><code>[强制]</code> 变量、函数在使用前必须先定义。</h5><p>解释：</p><p>不通过 var 定义变量将导致变量污染全局环境。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'myName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line">name = <span class="string">'myName'</span>;</span><br></pre></td></tr></table></figure><p>原则上不建议使用全局变量，对于已有的全局变量或第三方框架引入的全局变量，需要根据检查工具的语法标识。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* globals jQuery */</span></span><br><span class="line"><span class="keyword">var</span> element = jQuery(<span class="string">'#element-id'</span>);</span><br></pre></td></tr></table></figure><h5 id="建议-每个-var-只能声明一个变量。"><a href="#建议-每个-var-只能声明一个变量。" class="headerlink" title="[建议] 每个 var 只能声明一个变量。"></a>[建议] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p><p>一个 <code>var</code> 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [];</span><br><span class="line"><span class="keyword">var</span> missModules = [];</span><br><span class="line"><span class="keyword">var</span> visited = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [],</span><br><span class="line">    missModules = [],</span><br><span class="line">    visited = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"><a href="#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。" class="headerlink" title="[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"></a><code>[强制]</code> 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释：</p><p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-条件"><a href="#3-2-条件" class="headerlink" title="3.2 条件"></a>3.2 条件</h3><h5 id="强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。"><a href="#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。" class="headerlink" title="[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。"></a><code>[强制]</code> 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 <code>null</code> 或 <code>undefined</code> 时，允许使用 <code>== null</code>。</h5><p>解释：</p><p>使用 <code>===</code> 可以避免等于判断中隐式的类型转换。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-尽可能使用简洁的表达式。"><a href="#建议-尽可能使用简洁的表达式。" class="headerlink" title="[建议] 尽可能使用简洁的表达式。"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔不成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (!notTrue) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-按执行频率排列分支的顺序。"><a href="#建议-按执行频率排列分支的顺序。" class="headerlink" title="[建议] 按执行频率排列分支的顺序。"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p><p>按执行频率排列分支的顺序好处是：</p><ol><li>阅读的人容易找到最常见的情况，增加可读性。</li><li>提高执行效率。</li></ol><h5 id="建议-对于相同变量或表达式的多值条件，用-switch-代替-if。"><a href="#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。" class="headerlink" title="[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'number'</span> || type === <span class="string">'boolean'</span> || type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。"><a href="#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。" class="headerlink" title="[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h3><h5 id="建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。"><a href="#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。" class="headerlink" title="[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p><p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, clicker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对循环内多次使用的不变值，在循环外用变量缓存。"><a href="#建议-对循环内多次使用的不变值，在循环外用变量缓存。" class="headerlink" title="[建议] 对循环内多次使用的不变值，在循环外用变量缓存。"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = width;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行遍历时，缓存-length。"><a href="#建议-对有序集合进行遍历时，缓存-length。" class="headerlink" title="[建议] 对有序集合进行遍历时，缓存 length。"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p><p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 <code>length</code> 访问时会动态计算元素个数，此时缓存 <code>length</code> 能有效提高程序性能。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。"><a href="#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。" class="headerlink" title="[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p><p>逆序遍历可以节省变量，代码比较优化。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = elements.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[len];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-类型"><a href="#3-4-类型" class="headerlink" title="3.4 类型"></a>3.4 类型</h3><h4 id="3-4-1-类型检测"><a href="#3-4-1-类型检测" class="headerlink" title="3.4.1 类型检测"></a>3.4.1 类型检测</h4><h5 id="建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。"><a href="#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" class="headerlink" title="[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-类型转换"><a href="#3-4-2-类型转换" class="headerlink" title="3.4.2 类型转换"></a>3.4.2 类型转换</h4><h5 id="建议-转换成-string-时，使用-39-39-。"><a href="#建议-转换成-string-时，使用-39-39-。" class="headerlink" title="[建议] 转换成 string 时，使用 + &#39;&#39;。"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">num + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</span><br><span class="line">num.toString();</span><br><span class="line"><span class="built_in">String</span>(num);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-number-时，通常使用-。"><a href="#建议-转换成-number-时，通常使用-。" class="headerlink" title="[建议] 转换成 number 时，通常使用 +。"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">+str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。"><a href="#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。" class="headerlink" title="[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="string">'200px'</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h5 id="建议-使用-parseInt-时，必须指定进制。"><a href="#建议-使用-parseInt-时，必须指定进制。" class="headerlink" title="[建议] 使用 parseInt 时，必须指定进制。"></a>[建议] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="built_in">parseInt</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-boolean-时，使用-。"><a href="#建议-转换成-boolean-时，使用-。" class="headerlink" title="[建议] 转换成 boolean 时，使用 !!。"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line">!!num;</span><br></pre></td></tr></table></figure><h5 id="建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。"><a href="#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。" class="headerlink" title="[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor</code> / <code>Math.round</code> / <code>Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><h5 id="强制-字符串开头和结束使用单引号-39-。"><a href="#强制-字符串开头和结束使用单引号-39-。" class="headerlink" title="[强制] 字符串开头和结束使用单引号 &#39;。"></a><code>[强制]</code> 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p><ol><li>输入单引号不需要按住 <code>shift</code>，方便输入。</li><li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'我是一个字符串'</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-数组-或-拼接字符串。"><a href="#建议-使用-数组-或-拼接字符串。" class="headerlink" title="[建议] 使用 数组 或 + 拼接字符串。"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p><ol><li>使用 <code>+</code> 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 <code>+</code> 拼接。</li><li>在现代浏览器下，使用 <code>+</code> 拼接字符串，性能较数组的方式要高。</li><li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></span><br><span class="line">    <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/ul&gt;'</span></span><br><span class="line">].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 `+` 拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></span><br><span class="line">    + <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"><a href="#建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。" class="headerlink" title="[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"></a>[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。</h5><p>解释：</p><p>在 <code>JavaScript</code> 中拼接，并且最终将输出到页面中的字符串，需要进行合理转义，以防止安全漏洞。下面的示例代码为场景说明，不能直接运行。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;p&gt;'</span> + htmlEncode(content) + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;input type="text" value="'</span> + htmlEncode(value) + <span class="string">'"&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;a href="/?key='</span> + htmlEncode(urlEncode(value)) + <span class="string">'"&gt;link&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript字符串 转义 + HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;button onclick="check(\''</span> + htmlEncode(strLiteral(name)) + <span class="string">'\')"&gt;提交&lt;/button&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。"><a href="#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。" class="headerlink" title="[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p><p>使用模板引擎有如下好处：</p><ol><li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li><li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li><li>模板引擎能方便的对动态数据进行相应的转义，部分模板引擎默认进行HTML转义，安全性更好。</li></ol><h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><h5 id="强制-使用对象字面量-创建新-Object。"><a href="#强制-使用对象字面量-创建新-Object。" class="headerlink" title="[强制] 使用对象字面量 {} 创建新 Object。"></a><code>[强制]</code> 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h5 id="建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。"><a href="#建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。" class="headerlink" title="[建议] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，建议所有 属性 不添加引号。"></a>[建议] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，建议所有 <code>属性</code> 不添加引号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。"><a href="#建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。" class="headerlink" title="[建议] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 建议添加 &#39;。"></a>[建议] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 建议添加 <code>&#39;</code>。</h5><p>解释：</p><p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'someone'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-不允许修改和扩展任何原生对象和宿主对象的原型。"><a href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型。" class="headerlink" title="[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。"></a><code>[强制]</code> 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下行为绝对禁止</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-属性访问时，尽量使用-。"><a href="#建议-属性访问时，尽量使用-。" class="headerlink" title="[建议] 属性访问时，尽量使用 .。"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p><p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p><p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性（比如来自后端的 JSON ），可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info.age;</span><br><span class="line">info[<span class="string">'more-info'</span>];</span><br></pre></td></tr></table></figure><h5 id="建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。"><a href="#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。" class="headerlink" title="[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</span><br><span class="line">        newInfo[key] = info[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-数组"><a href="#3-7-数组" class="headerlink" title="3.7 数组"></a>3.7 数组</h3><h5 id="强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。"><a href="#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。" class="headerlink" title="[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。"></a><code>[强制]</code> 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><h5 id="强制-遍历数组不使用-for-in。"><a href="#强制-遍历数组不使用-for-in。" class="headerlink" title="[强制] 遍历数组不使用 for in。"></a><code>[强制]</code> 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p><p>数组对象可能存在数字以外的属性, 这种情况下 <code>for in</code> 不会得到正确结果，顺序也不是一定的。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里仅作演示, 实际中应使用 Object 类型</span></span><br><span class="line">arr.other = <span class="string">'other things'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。"><a href="#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。" class="headerlink" title="[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p><p>自己实现的常规排序算法，在性能上并不优于数组默认的 <code>sort</code> 方法。以下两种场景可以自己实现排序：</p><ol><li>需要稳定的排序算法，达到严格一致的排序结果。</li><li>数据特点鲜明，适合使用桶排。</li></ol><h5 id="建议-清空数组使用-length-0。"><a href="#建议-清空数组使用-length-0。" class="headerlink" title="[建议] 清空数组使用 .length = 0。"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id="3-8-函数"><a href="#3-8-函数" class="headerlink" title="3.8 函数"></a>3.8 函数</h3><h4 id="3-8-1-函数长度"><a href="#3-8-1-函数长度" class="headerlink" title="3.8.1 函数长度"></a>3.8.1 函数长度</h4><h5 id="建议-一个函数的长度控制在-50-行以内。"><a href="#建议-一个函数的长度控制在-50-行以内。" class="headerlink" title="[建议] 一个函数的长度控制在 50 行以内。"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p><p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p><p>特定算法等不可分割的逻辑允许例外。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.value) &#123;</span><br><span class="line">        warning.innerText = <span class="string">''</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        warning.innerText = <span class="string">'Please enter it'</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    syncXStateToView();</span><br><span class="line">    checkAAvailability();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    y.checked = x.checked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.value) &#123;</span><br><span class="line">        clearWarnignForA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        displayWarningForAMissing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-2-参数设计"><a href="#3-8-2-参数设计" class="headerlink" title="3.8.2 参数设计"></a>3.8.2 参数设计</h4><h5 id="建议-一个函数的参数控制在-6-个以内。"><a href="#建议-一个函数的参数控制在-6-个以内。" class="headerlink" title="[建议] 一个函数的参数控制在 6 个以内。"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p><p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 <code>6</code> 个以内，过多参数会导致维护难度增大。</p><p>某些情况下，如使用 AMD Loader 的 <code>require</code> 加载多个模块时，其 <code>callback</code> 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p><h5 id="建议-通过-options-参数传递非数据输入型参数。"><a href="#建议-通过-options-参数传递非数据输入型参数。" class="headerlink" title="[建议] 通过 options 参数传递非数据输入型参数。"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p><p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 <code>options</code> 参数传递。</p><p>如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以转换为下面的签名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; options 相关的逻辑配置</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式有几个显著的优势：</p><ul><li><code>boolean</code> 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li><li>当配置项有增长时，无需无休止地增加参数个数，不会出现 <code>removeElement(element, true, false, false, 3)</code> 这样难以理解的调用代码。</li><li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li></ul><h4 id="3-8-3-闭包"><a href="#3-8-3-闭包" class="headerlink" title="3.8.3 闭包"></a>3.8.3 闭包</h4><h5 id="建议-在适当的时候将闭包内大对象置为-null。"><a href="#建议-在适当的时候将闭包内大对象置为-null。" class="headerlink" title="[建议] 在适当的时候将闭包内大对象置为 null。"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p><p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p><p>闭包会阻止一些变量的垃圾回收，对于较老旧的 JavaScript 引擎，可能导致外部所有变量均无法回收。</p><p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p><ul><li>嵌套的函数中是否有使用该变量。</li><li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li><li>是否使用了 with 表达式。</li></ul><p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p><p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 <strong>fn</strong> 时：</p><ol><li>如果 <strong>fn</strong> 的 <code>[[Scope]]</code> 是 ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol><li>如果是 V8 引擎，则退出全过程。</li><li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li></ol></li><li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol><li>如果 FunctionBody 中含有 <strong>直接调用 eval</strong>，则退出全过程。</li><li>否则得到所有的 Identifier。</li><li>对于每一个 Identifier，设其为 <strong>name</strong>，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 <strong>name</strong> 的绑定 binding。</li><li>对 binding 添加 <strong>notSwap</strong> 属性，其值为 <code>true</code>。</li></ol></li><li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 <strong>notSwap</strong> 属性且值为 <code>true</code>，则：<ol><li>如果是 V8 引擎，删除该绑定。</li><li>如果是 SpiderMonkey，将该绑定的值设为 <code>undefined</code>，将删除 <strong>notSwap</strong> 属性。</li></ol></li></ol><p>对于 Chakra 引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p><p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p><h5 id="建议-使用-IIFE-避免-Lift-效应。"><a href="#建议-使用-IIFE-避免-Lift-效应。" class="headerlink" title="[建议] 使用 IIFE 避免 Lift 效应。"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p><p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p><p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意有一层额外的闭包</span></span><br><span class="line">    tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-4-空函数"><a href="#3-8-4-空函数" class="headerlink" title="3.8.4 空函数"></a>3.8.4 空函数</h4><h5 id="建议-空函数不使用-new-Function-的形式。"><a href="#建议-空函数不使用-new-Function-的形式。" class="headerlink" title="[建议] 空函数不使用 new Function() 的形式。"></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"><a href="#建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。" class="headerlink" title="[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EMPTY_FUNCTION = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</span><br></pre></td></tr></table></figure><h3 id="3-9-面向对象"><a href="#3-9-面向对象" class="headerlink" title="3.9 面向对象"></a>3.9 面向对象</h3><h5 id="强制-类的继承方案，实现时需要修正-constructor。"><a href="#强制-类的继承方案，实现时需要修正-constructor。" class="headerlink" title="[强制] 类的继承方案，实现时需要修正 constructor。"></a><code>[强制]</code> 类的继承方案，实现时需要修正 <code>constructor</code>。</h5><p>解释：</p><p>通常使用其他 library 的类继承方案都会进行 <code>constructor</code> 修正。如果是自己实现的类继承方案，需要进行 <code>constructor</code> 修正。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建类之间的继承关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; subClass 子类函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; superClass 父类函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">    F.prototype = superClass.prototype;</span><br><span class="line">    subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-声明类时，保证-constructor-的正确性。"><a href="#建议-声明类时，保证-constructor-的正确性。" class="headerlink" title="[建议] 声明类时，保证 constructor 的正确性。"></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接prototype等于对象时，需要修正constructor</span></span><br><span class="line">Animal.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Animal,</span><br><span class="line"></span><br><span class="line">    jump: function () &#123;</span><br><span class="line">        alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式扩展prototype则无需理会constructor</span></span><br><span class="line">Animal.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-属性在构造函数中声明，方法在原型中声明。"><a href="#建议-属性在构造函数中声明，方法在原型中声明。" class="headerlink" title="[建议] 属性在构造函数中声明，方法在原型中声明。"></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5><p>解释：</p><p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-自定义事件的-事件名-必须望文知义-多个单词组成采用驼峰法。"><a href="#强制-自定义事件的-事件名-必须望文知义-多个单词组成采用驼峰法。" class="headerlink" title="[强制] 自定义事件的 事件名 必须望文知义,多个单词组成采用驼峰法。"></a><code>[强制]</code> 自定义事件的 <code>事件名</code> 必须望文知义,多个单词组成采用驼峰法。</h5><h5 id="强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。"><a href="#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。" class="headerlink" title="[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。"></a><code>[强制]</code> 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5><p>解释：</p><p>一个事件对象的好处有：</p><ol><li>顺序无关，避免事件监听者需要记忆参数顺序。</li><li>每个事件信息都可以根据需要提供或者不提供，更自由。</li><li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li></ol><h5 id="建议-设计自定义事件时，应考虑禁止默认行为。"><a href="#建议-设计自定义事件时，应考虑禁止默认行为。" class="headerlink" title="[建议] 设计自定义事件时，应考虑禁止默认行为。"></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5><p>解释：</p><p>常见禁止默认行为的方式有两种：</p><ol><li>事件监听函数中 <code>return false</code>。</li><li>事件对象中包含禁止默认行为的方法，如 <code>preventDefault</code>。</li></ol><h3 id="3-10-动态特性"><a href="#3-10-动态特性" class="headerlink" title="3.10 动态特性"></a>3.10 动态特性</h3><h4 id="3-10-1-eval"><a href="#3-10-1-eval" class="headerlink" title="3.10.1 eval"></a>3.10.1 eval</h4><h5 id="强制-避免使用直接-eval-函数。"><a href="#强制-避免使用直接-eval-函数。" class="headerlink" title="[强制] 避免使用直接 eval 函数。"></a><code>[强制]</code> 避免使用直接 <code>eval</code> 函数。</h5><p>解释：</p><p>直接 <code>eval</code>，指的是以函数方式调用 <code>eval</code> 的调用方法。直接 <code>eval</code> 调用执行代码的作用域为本地作用域，应当避免。</p><p>如果有特殊情况需要使用直接 <code>eval</code>，需在代码中用详细的注释说明为何必须使用直接 <code>eval</code>，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p><h5 id="建议-尽量避免使用-eval-函数。"><a href="#建议-尽量避免使用-eval-函数。" class="headerlink" title="[建议] 尽量避免使用 eval 函数。"></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5><h4 id="3-10-2-动态执行代码"><a href="#3-10-2-动态执行代码" class="headerlink" title="3.10.2 动态执行代码"></a>3.10.2 动态执行代码</h4><h5 id="建议-使用-new-Function-执行动态代码。"><a href="#建议-使用-new-Function-执行动态代码。" class="headerlink" title="[建议] 使用 new Function 执行动态代码。"></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5><p>解释：</p><p>通过 <code>new Function</code> 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 <code>new Function</code>。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'return x + y;'</span>);</span><br><span class="line"><span class="keyword">var</span> result = handler($(<span class="string">'#x'</span>).val(), $(<span class="string">'#y'</span>).val());</span><br></pre></td></tr></table></figure><h4 id="3-10-3-with"><a href="#3-10-3-with" class="headerlink" title="3.10.3 with"></a>3.10.3 with</h4><h5 id="建议-尽量不要使用-with。"><a href="#建议-尽量不要使用-with。" class="headerlink" title="[建议] 尽量不要使用 with。"></a>[建议] 尽量不要使用 <code>with</code>。</h5><p>解释：</p><p>使用 <code>with</code> 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 <code>with</code> 的场景都能使用其他方式较好的替代。所以，尽量不要使用 <code>with</code>。</p><h4 id="3-10-4-delete"><a href="#3-10-4-delete" class="headerlink" title="3.10.4 delete"></a>3.10.4 delete</h4><h5 id="建议-减少-delete-的使用。"><a href="#建议-减少-delete-的使用。" class="headerlink" title="[建议] 减少 delete 的使用。"></a>[建议] 减少 <code>delete</code> 的使用。</h5><p>解释：</p><p>如果没有特别的需求，减少或避免使用 <code>delete</code>。<code>delete</code> 的使用会破坏部分 JavaScript 引擎的性能优化。</p><h5 id="建议-处理-delete-可能产生的异常。"><a href="#建议-处理-delete-可能产生的异常。" class="headerlink" title="[建议] 处理 delete 可能产生的异常。"></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5><p>解释：</p><p>对于有被遍历需求，且值 <code>null</code> 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 <code>delete</code> 操作。</p><p>在严格模式或 IE 下使用 <code>delete</code> 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 <code>try-catch</code> 块。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> o.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (deleteError) &#123;</span><br><span class="line">    o.x = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-10-5-对象属性"><a href="#3-10-5-对象属性" class="headerlink" title="3.10.5 对象属性"></a>3.10.5 对象属性</h4><h5 id="建议-避免修改外部传入的对象。"><a href="#建议-避免修改外部传入的对象。" class="headerlink" title="[建议] 避免修改外部传入的对象。"></a>[建议] 避免修改外部传入的对象。</h5><p>解释：</p><p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p><p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p><p>下面代码的 <strong>selectNode</strong> 方法修改了由外部传入的 <strong>datasource</strong> 对象。如果 <strong>datasource</strong> 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node.selected = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 <strong>selectedNodeIndex</strong> 对象来维护节点的选中状态，不对 <strong>datasource</strong> 作任何修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">    <span class="keyword">this</span>.selectedNodeIndex = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="keyword">this</span>.selectedNodeIndex[id] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p><h5 id="建议-具备强类型的设计。"><a href="#建议-具备强类型的设计。" class="headerlink" title="[建议] 具备强类型的设计。"></a>[建议] 具备强类型的设计。</h5><p>解释：</p><ul><li>如果一个属性被设计为 <code>boolean</code> 类型，则不要使用 <code>1</code> 或 <code>0</code> 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 <code>number</code> 类型且将 <code>0</code> 作为否定值。</li><li>从 DOM 中取出的值通常为 <code>string</code> 类型，如果有对象或函数的接收类型为 <code>number</code> 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li></ul><h2 id="4-浏览器环境"><a href="#4-浏览器环境" class="headerlink" title="4 浏览器环境"></a>4 浏览器环境</h2><h3 id="4-1-模块化"><a href="#4-1-模块化" class="headerlink" title="4.1 模块化"></a>4.1 模块化</h3><h5 id="强制-模块-id-必须符合标准。"><a href="#强制-模块-id-必须符合标准。" class="headerlink" title="[强制] 模块 id 必须符合标准。"></a>[强制] 模块 <code>id</code> 必须符合标准。</h5><p>解释：</p><p>模块 id 必须符合以下约束条件：</p><ol><li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li><li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li><li>不应该有 .js 后缀。</li><li>跟文件的路径保持一致。</li></ol><h4 id="4-1-1-define"><a href="#4-1-1-define" class="headerlink" title="4.1.1 define"></a>4.1.1 define</h4><h5 id="建议-定义模块时不要指明-id-和-dependencies。"><a href="#建议-定义模块时不要指明-id-和-dependencies。" class="headerlink" title="[建议] 定义模块时不要指明 id 和 dependencies。"></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5><p>解释：</p><p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 <code>local require</code> 引用。</p><p>所以，推荐使用 <code>define(factory)</code> 的形式进行模块定义。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-使用-return-来返回模块定义。"><a href="#建议-使用-return-来返回模块定义。" class="headerlink" title="[建议] 使用 return 来返回模块定义。"></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5><p>解释：</p><p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4-1-2-require"><a href="#4-1-2-require" class="headerlink" title="4.1.2 require"></a>4.1.2 require</h4><h5 id="强制-全局运行环境中，require-必须以-async-require-形式调用。"><a href="#强制-全局运行环境中，require-必须以-async-require-形式调用。" class="headerlink" title="[强制] 全局运行环境中，require 必须以 async require 形式调用。"></a><code>[强制]</code> 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5><p>解释：</p><p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h5 id="强制-模块定义中只允许使用-local-require，不允许使用-global-require。"><a href="#强制-模块定义中只允许使用-local-require，不允许使用-global-require。" class="headerlink" title="[强制] 模块定义中只允许使用 local require，不允许使用 global require。"></a><code>[强制]</code> 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5><p>解释：</p><ol><li>在模块定义中使用 <code>global require</code>，对封装性是一种破坏。</li><li>在 AMD 里，<code>global require</code> 是可以被重命名的。并且 Loader 甚至没有全局的 <code>require</code> 变量，而是用 Loader 名称做为 <code>global require</code>。模块定义不应该依赖使用的 Loader。</li></ol><h5 id="强制-Package-在实现时，内部模块的-require-必须使用-relative-id。"><a href="#强制-Package-在实现时，内部模块的-require-必须使用-relative-id。" class="headerlink" title="[强制] Package 在实现时，内部模块的 require 必须使用 relative id。"></a><code>[强制]</code> Package 在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5><p>解释：</p><p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，<code>require</code> 自身的其它模块时使用 <code>relative id</code>。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-不会被调用的依赖模块，在-factory-开始处统一-require。"><a href="#建议-不会被调用的依赖模块，在-factory-开始处统一-require。" class="headerlink" title="[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。"></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5><p>解释：</p><p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 <code>css</code> / <code>js</code> / <code>tpl</code> 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'css!foo.css'</span>);</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'tpl!bar.tpl.html'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-2-DOM"><a href="#4-2-DOM" class="headerlink" title="4.2 DOM"></a>4.2 DOM</h3><h4 id="4-2-1-元素获取"><a href="#4-2-1-元素获取" class="headerlink" title="4.2.1 元素获取"></a>4.2.1 元素获取</h4><h5 id="建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。"><a href="#建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。" class="headerlink" title="[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用document.all。"></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5><h5 id="建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。"><a href="#建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。" class="headerlink" title="[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。"></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5><h5 id="建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"><a href="#建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。" class="headerlink" title="[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5><p>解释：</p><p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 显示为 DIV</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = elements[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="undefined">docpment.body.insertBefore(p, div);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 显示为 P</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"><a href="#建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。" class="headerlink" title="[建议] 获取元素的直接子元素时使用 children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5><h4 id="4-2-2-样式获取"><a href="#4-2-2-样式获取" class="headerlink" title="4.2.2 样式获取"></a>4.2.2 样式获取</h4><h5 id="建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。"><a href="#建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。" class="headerlink" title="[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle。"></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5><p>解释：</p><p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p><h4 id="4-2-3-样式设置"><a href="#4-2-3-样式设置" class="headerlink" title="4.2.3 样式设置"></a>4.2.3 样式设置</h4><h5 id="建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。"><a href="#建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。" class="headerlink" title="[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。"></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5><h5 id="强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。"><a href="#强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。" class="headerlink" title="[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。"></a><code>[强制]</code> 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5><p>解释：</p><p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p><h4 id="4-2-4-DOM-操作"><a href="#4-2-4-DOM-操作" class="headerlink" title="4.2.4 DOM 操作"></a>4.2.4 DOM 操作</h4><h5 id="建议-操作-DOM-时，尽量减少页面-reflow。"><a href="#建议-操作-DOM-时，尽量减少页面-reflow。" class="headerlink" title="[建议] 操作 DOM 时，尽量减少页面 reflow。"></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5><p>解释：</p><p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p><ul><li>DOM元素的添加、修改（内容）、删除。</li><li>应用新的样式或者修改任何影响元素布局的属性。</li><li>Resize浏览器窗口、滚动页面。</li><li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li></ul><h5 id="建议-尽量减少-DOM-操作。"><a href="#建议-尽量减少-DOM-操作。" class="headerlink" title="[建议] 尽量减少 DOM 操作。"></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5><p>解释：</p><p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p><ol><li><p>在循环体中 createElement 并 append 到父元素中。</p></li><li><p>在循环体中 createElement 并 append 到createDocumentFragment的文档碎片中，然后文档碎片再append到父元素中。</p></li><li><p>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oFragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">    <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.createTextNode(<span class="string">"段落"</span> + i);</span><br><span class="line">    p.appendChild(oTxt);</span><br><span class="line">    oFragment.appendChild(p);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oFragment);</span><br></pre></td></tr></table></figure><p><code>以上，推荐第二种</code></p><p><br></p><h4 id="4-2-5-DOM-事件"><a href="#4-2-5-DOM-事件" class="headerlink" title="4.2.5 DOM 事件"></a>4.2.5 DOM 事件</h4><h5 id="建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。"><a href="#建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。" class="headerlink" title="[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。"></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5><p>解释：</p><p>expando 属性绑定事件容易导致互相覆盖。</p><h5 id="建议-使用-addEventListener-时第三个参数使用-false。"><a href="#建议-使用-addEventListener-时第三个参数使用-false。" class="headerlink" title="[建议] 使用 addEventListener 时第三个参数使用 false。"></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5><p>解释：</p><p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p><h5 id="建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"><a href="#建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。" class="headerlink" title="[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h3&gt;&lt;p&gt;项目是以团队为单位，代码规范应同出一门。&lt;br&gt;本文档的目标是使 JavaScript 代码风格保持
      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS编码和命名样例</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-5/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-5/</id>
    <published>2018-08-27T11:19:28.762Z</published>
    <updated>2018-08-27T11:20:20.842Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h4 id="最佳选择器写法（模块）"><a href="#最佳选择器写法（模块）" class="headerlink" title="最佳选择器写法（模块）"></a>最佳选择器写法（模块）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是某个模块 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span>&#123;&#125;<span class="comment">/* 模块容器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 先共性  优化组合 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">li</span>&#123;&#125;<span class="comment">/* 后个性  语义化标签选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 后个性中的共性 按结构顺序 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;<span class="comment">/* 后个性中的个性 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span>&#123;&#125;<span class="comment">/* 交互状态变化 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a1</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.z-crt</span> <span class="selector-tag">a</span><span class="selector-class">.a2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span>&#123;&#125;<span class="comment">/* 典型后代选择器 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-1</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn-disabled</span>&#123;&#125;<span class="comment">/* 典型后代选择器扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.btn</span><span class="selector-class">.z-disabled</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.m-sch</span>&#123;&#125;<span class="comment">/* 控制内部其他模块位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav</span> <span class="selector-class">.u-sel</span>&#123;&#125;<span class="comment">/* 控制内部其他元件位置 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span>&#123;&#125;<span class="comment">/* 模块扩展 */</span></span><br><span class="line"><span class="selector-class">.m-nav-1</span> <span class="selector-tag">li</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.m-nav-disabled</span>&#123;&#125;<span class="comment">/* 模块扩展（状态） */</span></span><br><span class="line"><span class="selector-class">.m-nav</span><span class="selector-class">.z-disabled</span>&#123;&#125;<span class="comment">/* 作用同上，请二选一（如果可以不兼容IE6时使用） */</span></span><br></pre></td></tr></table></figure><h4 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h4><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>文档</td><td>doc</td><td>doc</td></tr><tr><td>主体</td><td>body</td><td>bd</td></tr><tr><td>头部</td><td>header</td><td>hd</td></tr><tr><td>尾部</td><td>foot</td><td>ft</td></tr><tr><td>主栏</td><td>main</td><td>main</td></tr><tr><td>侧栏</td><td>sidebar</td><td>sidebar</td></tr><tr><td>栏目</td><td>column</td><td>column</td></tr><tr><td>页面最外层控制整体布局</td><td>wrapper</td><td>wrapper</td></tr></tbody></table><h4 id="模块（-m-）、元件（-u-）"><a href="#模块（-m-）、元件（-u-）" class="headerlink" title="模块（.m-）、元件（.u-）"></a>模块（.m-）、元件（.u-）</h4><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>导航</td><td>nav</td><td>nav</td></tr><tr><td>子导航</td><td>subnav</td><td>snav</td></tr><tr><td>面包屑</td><td>crumb</td><td>crm</td></tr><tr><td>菜单</td><td>menu</td><td>menu</td></tr><tr><td>选项卡</td><td>tab</td><td>tab</td></tr><tr><td>标题区</td><td>head/title</td><td>hd/title</td></tr><tr><td>摘要</td><td>summary</td><td>summary</td></tr><tr><td>内容区</td><td>body/content</td><td>bd/ct</td></tr><tr><td>列表</td><td>list</td><td>list</td></tr><tr><td>表格</td><td>table</td><td>tb</td></tr><tr><td>表单</td><td>form</td><td>fm</td></tr><tr><td>热点</td><td>hot</td><td>hot</td></tr><tr><td>排行</td><td>top</td><td>top</td></tr><tr><td>登录</td><td>login</td><td>login</td></tr><tr><td>标志</td><td>logo</td><td>logo</td></tr><tr><td>广告</td><td>advertise</td><td>ad</td></tr><tr><td>搜索</td><td>search</td><td>sch</td></tr><tr><td>幻灯</td><td>slide</td><td>sld</td></tr><tr><td>提示</td><td>tips</td><td>tips</td></tr><tr><td>帮助</td><td>help</td><td>help</td></tr><tr><td>新闻</td><td>news</td><td>news</td></tr><tr><td>下载</td><td>download</td><td>download</td></tr><tr><td>注册</td><td>register</td><td>reg</td></tr><tr><td>投票</td><td>vote</td><td>vote</td></tr><tr><td>版权</td><td>copyright</td><td>cprt</td></tr><tr><td>结果</td><td>result</td><td>rst</td></tr><tr><td>标题</td><td>title</td><td>title</td></tr><tr><td>按钮</td><td>button</td><td>btn</td></tr><tr><td>输入</td><td>input</td><td>input</td></tr></tbody></table><h4 id="功能（-f-）"><a href="#功能（-f-）" class="headerlink" title="功能（.f-）"></a>功能（.f-）</h4><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>浮动清除</td><td>clear</td><td>clear</td></tr><tr><td>向左浮动</td><td>float-left</td><td>fl</td></tr><tr><td>向右浮动</td><td>float-right</td><td>fr</td></tr><tr><td>内联块级</td><td>inline-block</td><td>ib</td></tr><tr><td>文本居中</td><td>text-align-center</td><td>tac</td></tr><tr><td>文本居右</td><td>text-align-right</td><td>tar</td></tr><tr><td>文本居左</td><td>text-align-left</td><td>tal</td></tr><tr><td>垂直居中</td><td>vertical-align-middle</td><td>vam</td></tr><tr><td>溢出隐藏</td><td>overflowhidden</td><td>oh</td></tr><tr><td>完全消失</td><td>display-none</td><td>dn</td></tr><tr><td>字体大小</td><td>fontsize</td><td>fs</td></tr><tr><td>字体粗细</td><td>fontweight</td><td>fw</td></tr></tbody></table><h4 id="状态（-z-）"><a href="#状态（-z-）" class="headerlink" title="状态（.z-）"></a>状态（.z-）</h4><table><thead><tr><th>语义</th><th>命名</th><th>简写</th></tr></thead><tbody><tr><td>选中</td><td>selected</td><td>sel</td></tr><tr><td>当前</td><td>current</td><td>cur</td></tr><tr><td>显示</td><td>show</td><td>show</td></tr><tr><td>隐藏</td><td>hide</td><td>hide</td></tr><tr><td>打开</td><td>open</td><td>open</td></tr><tr><td>关闭</td><td>close</td><td>close</td></tr><tr><td>出错</td><td>error</td><td>err</td></tr><tr><td>不可用</td><td>disabled</td><td>disabled</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;最佳选择器写法（模块）&quot;&gt;&lt;a href=&quot;#最佳选择器写法（模块）&quot; class=&quot;headerlink&quot; title=&quot;最佳选择器写法（模块）&quot;&gt;&lt;/a&gt;最佳选择器写法（模块）&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS编码规范</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-4/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-4/</id>
    <published>2018-08-27T11:18:10.843Z</published>
    <updated>2018-08-27T11:28:00.427Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><hr><p>项目是以团队为单位，代码规范应同出一门。<br>本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。</p><h3 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h3><hr><h4 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h4><h5 id="强制-CSS-文件使用无BOM的-UTF-8-编码。"><a href="#强制-CSS-文件使用无BOM的-UTF-8-编码。" class="headerlink" title="[强制] CSS 文件使用无BOM的 UTF-8 编码。"></a><code>[强制]</code> CSS 文件使用无BOM的 <code>UTF-8</code> 编码。</h5><p><br></p><h4 id="2-2-空格"><a href="#2-2-空格" class="headerlink" title="2.2 空格"></a>2.2 空格</h4><h5 id="强制-选择器-与-之间必须包含空格。"><a href="#强制-选择器-与-之间必须包含空格。" class="headerlink" title="[强制] 选择器 与 { 之间必须包含空格。"></a><code>[强制]</code> 选择器 与 { 之间必须包含空格。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。"><a href="#强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。" class="headerlink" title="[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。"></a><code>[强制]</code> 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0;</span><br></pre></td></tr></table></figure><h5 id="强制-列表型属性值书写在单行时，-后必须跟一个空格。"><a href="#强制-列表型属性值书写在单行时，-后必须跟一个空格。" class="headerlink" title="[强制] 列表型属性值书写在单行时，, 后必须跟一个空格。"></a><code>[强制]</code> 列表型属性值书写在单行时，<code>,</code> 后必须跟一个空格。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-选择器"><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h4><h5 id="强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。"><a href="#强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。" class="headerlink" title="[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。"></a><code>[强制]</code> 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 好的方式 */</span></span><br><span class="line"><span class="selector-class">.post</span>,</span><br><span class="line"><span class="selector-class">.page</span>,</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-gt-、-、-选择器的两边各保留一个空格。"><a href="#强制-gt-、-、-选择器的两边各保留一个空格。" class="headerlink" title="[强制]  &gt;、+、~ 选择器的两边各保留一个空格。"></a><code>[强制]</code>  <code>&gt;</code>、<code>+</code>、<code>~</code> 选择器的两边各保留一个空格。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 好的规范 */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 差的规范 */</span></span><br><span class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-属性选择器中的值必须用双引号包围。"><a href="#强制-属性选择器中的值必须用双引号包围。" class="headerlink" title="[强制] 属性选择器中的值必须用双引号包围。"></a><code>[强制]</code> 属性选择器中的值必须用双引号包围。</h5><p>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-属性"><a href="#2-4-属性" class="headerlink" title="2.4 属性"></a>2.4 属性</h4><h5 id="强制-属性定义必须另起一行。"><a href="#强制-属性定义必须另起一行。" class="headerlink" title="[强制] 属性定义必须另起一行。"></a><code>[强制]</code> 属性定义必须另起一行。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h5 id="强制-属性定义后必须以分号结尾。"><a href="#强制-属性定义后必须以分号结尾。" class="headerlink" title="[强制] 属性定义后必须以分号结尾。"></a><code>[强制]</code> 属性定义后必须以分号结尾。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h3><hr><h4 id="3-1-选择器"><a href="#3-1-选择器" class="headerlink" title="3.1 选择器"></a>3.1 选择器</h4><h5 id="强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。"><a href="#强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。" class="headerlink" title="[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。"></a><code>[强制]</code> 如无必要，不得为 <code>id</code>、<code>class</code> 选择器添加类型选择器进行限定。</h5><p>解释：</p><p>在性能和维护性上，都有一定的影响。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。"><a href="#建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。" class="headerlink" title="[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。"></a>[建议] 选择器的嵌套层级应不大于 <code>3</code> 级，位置靠后的限定条件应尽可能精确。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-属性缩写"><a href="#3-2-属性缩写" class="headerlink" title="3.2 属性缩写"></a>3.2 属性缩写</h4><h5 id="建议-在可以使用缩写的情况下，尽量使用属性缩写。"><a href="#建议-在可以使用缩写的情况下，尽量使用属性缩写。" class="headerlink" title="[建议] 在可以使用缩写的情况下，尽量使用属性缩写。"></a>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"><a href="#建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。" class="headerlink" title="[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"></a>[建议] 使用 <code>border</code> / <code>margin</code> / <code>padding</code> 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。</h5><p>解释：</p><p><code>border</code> / <code>margin</code> / <code>padding</code> 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3 属性书写顺序"></a>3.3 属性书写顺序</h4><h5 id="建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。"><a href="#建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。" class="headerlink" title="[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。"></a>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 <strong>Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果）</strong> 的顺序书写，以提高代码的可读性。</h5><p>解释：</p><ul><li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li><li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li><li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li><li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li></ul><p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h4><h5 id="建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。"><a href="#建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。" class="headerlink" title="[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。"></a>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 <code>clear</code> 或触发 <code>BFC</code> 的方式进行 <code>clearfix</code>。尽量不使用增加空标签的方式。</h5><p>解释：</p><p>触发 BFC 的方式很多，常见的有：</p><ul><li>float 非 none</li><li>position 非 static</li><li>overflow 非 visible</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">   <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p><h4 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5 !important"></a>3.5 !important</h4><h5 id="建议-尽量不使用-important-声明。"><a href="#建议-尽量不使用-important-声明。" class="headerlink" title="[建议] 尽量不使用 !important 声明。"></a>[建议] 尽量不使用 <code>!important</code> 声明。</h5><h5 id="建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。"><a href="#建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。" class="headerlink" title="[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。"></a>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 <code>!important</code> 定义样式。</h5><p>解释：</p><p>必须注意的是，仅在设计上 <code>确实不允许任何其它场景覆盖样式</code> 时，才使用内联的 <code>!important</code> 样式。通常在第三方环境的应用中使用这种方案。下面的 <code>z-index</code> 章节是其中一个特殊场景的典型样例。</p><h4 id="3-6-z-index"><a href="#3-6-z-index" class="headerlink" title="3.6 z-index"></a>3.6 z-index</h4><h5 id="建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"><a href="#建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。" class="headerlink" title="[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"></a>[建议] 将 <code>z-index</code> 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。</h5><p>解释：</p><p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 <code>z-index</code> 或递增 <code>z-index</code>。</p><p>建议每层包含100个 <code>z-index</code> 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p><h5 id="建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。"><a href="#建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。" class="headerlink" title="[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。"></a>[建议] 在可控环境下，期望显示在最上层的元素，<code>z-index</code> 指定为 <code>999999</code>。</h5><p>解释：</p><p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p><p>不建议取值为 <code>2147483647</code>。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p><h5 id="建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。"><a href="#建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。" class="headerlink" title="[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。"></a>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 <code>!important</code>，将 <code>z-index</code> 指定为 <code>2147483647</code>。</h5><p>解释：</p><p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p><h3 id="4-值与单位"><a href="#4-值与单位" class="headerlink" title="4 值与单位"></a>4 值与单位</h3><hr><h4 id="4-1-文本"><a href="#4-1-文本" class="headerlink" title="4.1 文本"></a>4.1 文本</h4><h5 id="强制-文本内容必须用双引号包围。"><a href="#强制-文本内容必须用双引号包围。" class="headerlink" title="[强制] 文本内容必须用双引号包围。"></a><code>[强制]</code> 文本内容必须用双引号包围。</h5><p>解释：</p><p>文本类型的内容可能在选择器、属性值等内容中。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-url"><a href="#4-2-url" class="headerlink" title="4.2 url()"></a>4.2 url()</h4><h5 id="建议-url-函数中的绝对路径可省去协议名。"><a href="#建议-url-函数中的绝对路径可省去协议名。" class="headerlink" title="[建议] url() 函数中的绝对路径可省去协议名。"></a>[建议] <code>url()</code> 函数中的绝对路径可省去协议名。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-长度"><a href="#4-3-长度" class="headerlink" title="4.3 长度"></a>4.3 长度</h4><h5 id="强制-长度为-0-时须省略单位。-也只有长度单位可省"><a href="#强制-长度为-0-时须省略单位。-也只有长度单位可省" class="headerlink" title="[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)"></a><code>[强制]</code> 长度为 <code>0</code> 时须省略单位。 (也只有长度单位可省)</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-颜色值可以缩写时，必须使用缩写形式。"><a href="#建议-颜色值可以缩写时，必须使用缩写形式。" class="headerlink" title="[建议] 颜色值可以缩写时，必须使用缩写形式。"></a>[建议] 颜色值可以缩写时，必须使用缩写形式。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-颜色值不允许使用命名色值。"><a href="#强制-颜色值不允许使用命名色值。" class="headerlink" title="[强制] 颜色值不允许使用命名色值。"></a><code>[强制]</code> 颜色值不允许使用命名色值。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"><a href="#建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。" class="headerlink" title="[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"></a>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2D-位置"><a href="#4-4-2D-位置" class="headerlink" title="4.4 2D 位置"></a>4.4 2D 位置</h4><h5 id="强制-必须同时给出水平和垂直方向的位置。"><a href="#强制-必须同时给出水平和垂直方向的位置。" class="headerlink" title="[强制] 必须同时给出水平和垂直方向的位置。"></a><code>[强制]</code> 必须同时给出水平和垂直方向的位置。</h5><p>解释：</p><p>2D 位置初始值为 <code>0% 0%</code>，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。<a href="http://www.w3.org/TR/CSS21/colors.html#propdef-background-position" target="_blank" rel="noopener">background-position属性值的定义</a></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-文本编排"><a href="#5-文本编排" class="headerlink" title="5 文本编排"></a>5 文本编排</h3><hr><h4 id="5-1-字体族"><a href="#5-1-字体族" class="headerlink" title="5.1 字体族"></a>5.1 字体族</h4><h5 id="强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。"><a href="#强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。" class="headerlink" title="[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。"></a><code>[强制]</code> font-family 属性中的字体族名称应使用字体的英文 <code>Family Name</code>，其中如有空格，须放置在引号中。</h5><p>解释：</p><p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p><table><thead><tr><th>字体</th><th>操作系统</th><th>Family Name</th></tr></thead><tbody><tr><td>宋体 (中易宋体)</td><td>Windows</td><td>SimSun</td></tr><tr><td>黑体 (中易黑体)</td><td>Windows</td><td>SimHei</td></tr><tr><td>微软雅黑</td><td>Windows</td><td>Microsoft YaHei</td></tr><tr><td>微软正黑</td><td>Windows</td><td>Microsoft JhengHei</td></tr><tr><td>华文黑体</td><td>Mac/iOS</td><td>STHeiti</td></tr><tr><td>冬青黑体</td><td>Mac/iOS</td><td>Hiragino Sans GB</td></tr><tr><td>文泉驿正黑</td><td>Linux</td><td>WenQuanYi Zen Hei</td></tr><tr><td>文泉驿微米黑</td><td>Linux</td><td>WenQuanYi Micro Hei</td></tr></tbody></table><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。"><a href="#强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。" class="headerlink" title="[强制]  font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。"></a><code>[强制]</code>  font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( <code>serif</code> / <code>sans-serif</code> )。</h5><p>解释：</p><p>更详细说明可参考<a href="http://www.zhihu.com/question/19911793/answer/13329819" target="_blank" rel="noopener">本文</a>。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Display according to platform */</span></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specific for most platforms */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-font-family不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。"><a href="#强制-font-family不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。" class="headerlink" title="[强制] font-family不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。"></a><code>[强制]</code> font-family不区分大小写，但在同一个项目中，同样的 <code>Family Name</code> 大小写必须统一。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-字号"><a href="#5-2-字号" class="headerlink" title="5.2 字号"></a>5.2 字号</h4><h5 id="强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。"><a href="#强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。" class="headerlink" title="[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。"></a><code>[强制]</code> 需要在 Windows 平台显示的中文内容，其字号应不小于 <code>12px</code>。</h5><p>解释：</p><p>由于 Windows 的字体渲染机制，小于 <code>12px</code> 的文字显示效果极差、难以辨认。</p><h4 id="5-3-字体风格"><a href="#5-3-字体风格" class="headerlink" title="5.3 字体风格"></a>5.3 字体风格</h4><h5 id="建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。"><a href="#建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。" class="headerlink" title="[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。"></a>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 <code>normal</code> 外的 <code>font-style</code>。其他平台也应慎用。</h5><p>解释：</p><p>由于中文字体没有 <code>italic</code> 风格的实现，所有浏览器下都会 fallback 到 <code>obilique</code> 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p><h4 id="5-4-字重"><a href="#5-4-字重" class="headerlink" title="5.4 字重"></a>5.4 字重</h4><h5 id="强制-font-weight属性必须使用数值方式描述。"><a href="#强制-font-weight属性必须使用数值方式描述。" class="headerlink" title="[强制] font-weight属性必须使用数值方式描述。"></a><code>[强制]</code> font-weight属性必须使用数值方式描述。</h5><p>解释：</p><p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 <code>400</code> 和 <code>700</code> 两档，分别等价于关键词 <code>normal</code> 和 <code>bold</code>。</p><p>浏览器本身使用一系列<a href="http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight" target="_blank" rel="noopener">启发式规则</a>来进行匹配，在 <code>&lt;700</code> 时一般匹配字体的 Regular 字重，<code>&gt;=700</code> 时匹配 Bold 字重。</p><p>但已有浏览器开始支持 <code>=600</code> 时匹配 Semibold 字重 (见<a href="http://justineo.github.io/slideshows/font/#/3/15" target="_blank" rel="noopener">此表</a>)，故使用数值描述增加了灵活性，也更简短。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-行高"><a href="#5-5-行高" class="headerlink" title="5.5 行高"></a>5.5 行高</h4><h5 id="建议-line-height-在定义文本段落时，应使用数值。"><a href="#建议-line-height-在定义文本段落时，应使用数值。" class="headerlink" title="[建议] line-height 在定义文本段落时，应使用数值。"></a>[建议] <code>line-height</code> 在定义文本段落时，应使用数值。</h5><p>解释：</p><p>将 <code>line-height</code> 设置为数值，浏览器会基于当前元素设置的 <code>font-size</code> 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 <code>font-size</code> 都需要设置 <code>line-height</code>。</p><p>当 <code>line-height</code> 用于控制垂直居中时，还是应该设置成与容器高度一致。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-变换与动画"><a href="#6-变换与动画" class="headerlink" title="6 变换与动画"></a>6 变换与动画</h3><h5 id="强制-使用-transition-时应指定-transition-property。"><a href="#强制-使用-transition-时应指定-transition-property。" class="headerlink" title="[强制] 使用 transition 时应指定 transition-property。"></a><code>[强制]</code> 使用 transition 时应指定 <code>transition-property</code>。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。"><a href="#建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。" class="headerlink" title="[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。"></a>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。</h5><p>解释：</p><p>见<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="noopener">本文</a>，在可能的情况下应选择这样四种变换：</p><ul><li><code>transform: translate(npx, npx);</code></li><li><code>transform: scale(n);</code></li><li><code>transform: rotate(ndeg);</code></li><li><code>opacity: 0..1;</code></li></ul><p>典型的，可以使用 <code>translate</code> 来代替 <code>left</code> 作为动画属性。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-响应式"><a href="#7-响应式" class="headerlink" title="7 响应式"></a>7 响应式</h3><h5 id="强制-Media-Query-不得单独编排，必须与相关的规则一起定义。"><a href="#强制-Media-Query-不得单独编排，必须与相关的规则一起定义。" class="headerlink" title="[强制] Media Query 不得单独编排，必须与相关的规则一起定义。"></a><code>[强制]</code> Media Query 不得单独编排，必须与相关的规则一起定义。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"><a href="#强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。" class="headerlink" title="[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"></a><code>[强制]</code> Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span></span><br><span class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></span><br><span class="line">    <span class="comment">/* Retina-specific stuff here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。"><a href="#建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。" class="headerlink" title="[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。"></a>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</h5><h3 id="8-兼容性"><a href="#8-兼容性" class="headerlink" title="8 兼容性"></a>8 兼容性</h3><h4 id="8-1-属性前缀"><a href="#8-1-属性前缀" class="headerlink" title="8.1 属性前缀"></a>8.1 属性前缀</h4><h5 id="强制-带私有前缀的属性由长到短排列，按冒号位置对齐。"><a href="#强制-带私有前缀的属性由长到短排列，按冒号位置对齐。" class="headerlink" title="[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。"></a><code>[强制]</code> 带私有前缀的属性由长到短排列，按冒号位置对齐。</h5><p>解释：</p><p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-Hack"><a href="#8-2-Hack" class="headerlink" title="8.2 Hack"></a>8.2 Hack</h4><h5 id="建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。"><a href="#建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。" class="headerlink" title="[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。"></a>[建议] 需要添加 <code>hack</code> 时应尽可能考虑是否可以采用其他方式解决。</h5><p>解释：</p><p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p><h5 id="建议-尽量使用简单的-属性-hack。"><a href="#建议-尽量使用简单的-属性-hack。" class="headerlink" title="[建议] 尽量使用简单的 属性 hack。"></a>[建议] 尽量使用简单的 <code>属性 hack</code>。</h5><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* 解决IE6下的双边距问题 */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    *zoom: 1; /* triggering hasLayout */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-Expression"><a href="#8-3-Expression" class="headerlink" title="8.3 Expression"></a>8.3 Expression</h4><h5 id="强制-禁止使用-Expression。"><a href="#强制-禁止使用-Expression。" class="headerlink" title="[强制] 禁止使用 Expression。"></a><code>[强制]</code> 禁止使用 <code>Expression</code>。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;项目是以团队为单位，代码规范应同出一门。&lt;br&gt;本文档的目标是使 CSS 代码风格保持一致
      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS命名规范</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-3/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-3/</id>
    <published>2018-08-27T11:16:32.826Z</published>
    <updated>2018-08-27T11:26:13.192Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="一-分类命名"><a href="#一-分类命名" class="headerlink" title="一.分类命名"></a>一.分类命名</h2><hr><p>项目是以团队为单位，代码规范应同出一门。</p><p><br></p><h3 id="1-CSS文件的分类和引用顺序"><a href="#1-CSS文件的分类和引用顺序" class="headerlink" title="1. CSS文件的分类和引用顺序"></a>1. CSS文件的分类和引用顺序</h3><p>通常，一个项目我们只引用一个CSS，但是对于较大的项目，我们需要把CSS文件进行分类。</p><p>我们按照CSS的性质和用途，将CSS文件分成“公共型样式”、“特殊型样式”、“皮肤型样式”，并以此顺序引用（按需求决定是否添加版本号）。</p><ol><li><p><code>公共型样式</code>：包括了以下几个部分：“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。</p></li><li><p><code>特殊型样式</code>：当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式：“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。</p></li><li><p><code>皮肤型样式</code>：如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"assets/css/global.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"assets/css/index.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"assets/css/skin.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-CSS内部的分类及其顺序"><a href="#2-CSS内部的分类及其顺序" class="headerlink" title="2. CSS内部的分类及其顺序"></a>2. CSS内部的分类及其顺序</h3><ul><li><p><code>重置（reset）和默认（base）（tags）</code>：消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动！你可以根据你的网站需求设置！</p></li><li><p><code>统一处理</code>：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！</p></li><li><p><code>布局（grid）（.xxx-）</code>：xxx代表项目名称（英文单词或拼音缩写），将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！</p></li><li><p><code>模块（module）（.m-）</code>：通常是一个语义化的可以重复使用的较大的整体！m代表模块名称英文单词或拼音缩写，比如借款，还款，征信，提现等</p></li><li><p><code>组件（unit）（.ui-）</code>：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！</p></li><li><p><code>功能（function）</code>：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！</p></li><li><p><code>皮肤（skin）（.skin-）</code>：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！</p></li></ul><p><code>**其中xxx是项目的英文名或拼音简写**</code></p><h2 id="二-命名规则"><a href="#二-命名规则" class="headerlink" title="二. 命名规则"></a>二. 命名规则</h2><hr><h3 id="1-分类的命名方法：使用单个字母-”-“为前缀"><a href="#1-分类的命名方法：使用单个字母-”-“为前缀" class="headerlink" title="1. 分类的命名方法：使用单个字母+”-“为前缀"></a>1. 分类的命名方法：使用单个字母+”-“为前缀</h3><ol><li><code>布局（grid）（.xxx-）；</code></li><li><code>模块（module）（.m-）；</code></li><li>`元件（</li></ol><p>）（.ui-）；`</p><ol start="4"><li><code>功能（function）；</code></li><li><code>皮肤（skin）（.skin-）；</code></li></ol><p>对以上的解释详情参见：分类方法中的“CSS内部的分类及其顺序”。</p><h3 id="2-模块和元件的扩展类的命名方法"><a href="#2-模块和元件的扩展类的命名方法" class="headerlink" title="2. 模块和元件的扩展类的命名方法"></a>2. 模块和元件的扩展类的命名方法</h3><p><code>当A、B、C、...它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。</code></p><p>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。</p><p><code>补充</code>：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。</p><p>如果你的扩展类是表示不同状态，那么你可以这样命名：ui-btn-dis，ui-btn-hov，m-box-sel，m-box-hov等等，然后像这样使用：class=”ui-btn ui-btn-disabled”。</p><h3 id="3-相同语义的不同类命名"><a href="#3-相同语义的不同类命名" class="headerlink" title="3. 相同语义的不同类命名"></a>3. 相同语义的不同类命名</h3><p>方法：直接加数字或字母区分即可（如：.m-list、.m-list-2、.m-list-3等，都是列表模块，但是是完全不一样的模块）。</p><p>其他举例：.s-fb0、.s-fb1、.m-logo2、.m-logo3、ui-btn、ui-btn2等等。</p><h3 id="4-相同的CSS样式要合并"><a href="#4-相同的CSS样式要合并" class="headerlink" title="4. 相同的CSS样式要合并"></a>4. 相同的CSS样式要合并</h3><p>有时候虽然两个同类型的模块很相似，但是你希望他们之间不要有依赖关系，也就是说你不希望使用扩展的方法，那么你可以通过合并选择器来设置共性的样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 两个元件共性的样式 */</span></span><br><span class="line"><span class="selector-class">.ui-tip1</span>,<span class="selector-class">.ui-tip2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.ui-tip1</span> <span class="selector-class">.item</span>,<span class="selector-class">.ui-tip2</span> <span class="selector-class">.item</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 在分别是两个元件各自的样式 */</span></span><br><span class="line"><span class="comment">/* tip1 */</span></span><br><span class="line"><span class="selector-class">.ui-tip1</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.ui-tip1</span> <span class="selector-class">.item</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* tip2 */</span></span><br><span class="line"><span class="selector-class">.ui-tip2</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.ui-tip2</span> <span class="selector-class">.item</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>使用本方法的前提是：相同类型、功能和外观都相似，写在同一片代码区域方便维护。</p><h3 id="5-防止污染和被污染"><a href="#5-防止污染和被污染" class="headerlink" title="5. 防止污染和被污染"></a>5. 防止污染和被污染</h3><p>当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。</p><p>所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx的形式来降低后代选择器的污染性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-分类命名&quot;&gt;&lt;a href=&quot;#一-分类命名&quot; class=&quot;headerlink&quot; title=&quot;一.分类命名&quot;&gt;&lt;/a&gt;一.分类命名&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;项目是以团队为单位，代码规范应同出一门。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML开发规范</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-2/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-2/</id>
    <published>2018-08-27T11:12:45.409Z</published>
    <updated>2018-08-27T11:16:13.146Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><hr><p>项目是以团队为单位，代码规范应同出一门</p><p>本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。</p><h3 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h3><hr><h4 id="2-1-命名"><a href="#2-1-命名" class="headerlink" title="2.1 命名"></a>2.1 命名</h4><h5 id="强制-class-必须单词全字母小写，单词间以-分隔。"><a href="#强制-class-必须单词全字母小写，单词间以-分隔。" class="headerlink" title="[强制] class 必须单词全字母小写，单词间以 - 分隔。"></a><code>[强制]</code> <code>class</code> 必须单词全字母小写，单词间以 <code>-</code> 分隔。</h5><h5 id="强制-class-必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。"><a href="#强制-class-必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。" class="headerlink" title="[强制] class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。"></a><code>[强制]</code> <code>class</code> 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="强制-元素-id-必须保证页面唯一。"><a href="#强制-元素-id-必须保证页面唯一。" class="headerlink" title="[强制] 元素 id 必须保证页面唯一。"></a><code>[强制]</code> 元素 <code>id</code> 必须保证页面唯一。</h5><p>解释：</p><p>同一个页面中，不同的元素包含相同的 <code>id</code>，不符合 <code>id</code> 的属性含义。并且使用 <code>document.getElementById</code> 时可能导致难以追查的问题。</p><h5 id="建议-id-建议单词全字母小写，单词间以-分隔。同项目必须保持风格一致。"><a href="#建议-id-建议单词全字母小写，单词间以-分隔。同项目必须保持风格一致。" class="headerlink" title="[建议] id 建议单词全字母小写，单词间以 - 分隔。同项目必须保持风格一致。"></a>[建议] <code>id</code> 建议单词全字母小写，单词间以 <code>-</code> 分隔。同项目必须保持风格一致。</h5><h5 id="建议-id、class-命名，在避免冲突并描述清楚的前提下尽可能短。"><a href="#建议-id、class-命名，在避免冲突并描述清楚的前提下尽可能短。" class="headerlink" title="[建议] id、class 命名，在避免冲突并描述清楚的前提下尽可能短。"></a>[建议] <code>id</code>、<code>class</code> 命名，在避免冲突并描述清楚的前提下尽可能短。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="强制-禁止为了-hook-脚本，创建无样式信息的-class。"><a href="#强制-禁止为了-hook-脚本，创建无样式信息的-class。" class="headerlink" title="[强制] 禁止为了 hook 脚本，创建无样式信息的 class。"></a><code>[强制]</code> 禁止为了 <code>hook 脚本</code>，创建无样式信息的 <code>class</code>。</h5><p>解释：</p><p>不允许 <code>class</code> 只用于让 JavaScript 选择某些元素，<code>class</code> 应该具有明确的语义和样式。否则容易导致 CSS class 泛滥。</p><p>使用 <code>id</code>、属性选择作为 hook 是更好的方式。</p><h4 id="2-2-标签"><a href="#2-2-标签" class="headerlink" title="2.2 标签"></a>2.2 标签</h4><h5 id="强制-标签名必须使用小写字母。"><a href="#强制-标签名必须使用小写字母。" class="headerlink" title="[强制] 标签名必须使用小写字母。"></a><code>[强制]</code> 标签名必须使用小写字母。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="强制-标签使用必须符合标签嵌套规则。"><a href="#强制-标签使用必须符合标签嵌套规则。" class="headerlink" title="[强制] 标签使用必须符合标签嵌套规则。"></a><code>[强制]</code> 标签使用必须符合标签嵌套规则。</h5><p>解释：</p><p>比如 <code>div</code> 不得置于 <code>p</code> 中，<code>tbody</code> 必须置于 <code>table</code> 中。</p><p>详细的标签嵌套规则参见<a href="http://www.cs.tut.fi/~jkorpela/html5.dtd" target="_blank" rel="noopener">HTML DTD</a>中的 <code>Elements</code> 定义部分。</p><h5 id="建议-HTML-标签的使用应该遵循标签的语义。"><a href="#建议-HTML-标签的使用应该遵循标签的语义。" class="headerlink" title="[建议] HTML 标签的使用应该遵循标签的语义。"></a>[建议] HTML 标签的使用应该遵循标签的语义。</h5><p>解释：</p><p>下面是常见标签语义</p><ul><li>p - 段落</li><li>h1,h2,h3,h4,h5,h6 - 层级标题</li><li>strong,em - 强调</li><li>ins - 插入</li><li>del - 删除</li><li>abbr - 缩写</li><li>code - 代码标识</li><li>cite - 引述来源作品的标题</li><li>q - 引用</li><li>blockquote - 一段或长篇引用</li><li>ul - 无序列表</li><li>ol - 有序列表</li><li>dl,dt,dd - 定义列表</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">strong</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"strong"</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">span</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-在-CSS-可以实现相同需求的情况下不得使用表格进行布局。"><a href="#建议-在-CSS-可以实现相同需求的情况下不得使用表格进行布局。" class="headerlink" title="[建议] 在 CSS 可以实现相同需求的情况下不得使用表格进行布局。"></a>[建议] 在 CSS 可以实现相同需求的情况下不得使用表格进行布局。</h5><p>解释：</p><p>在兼容性允许的情况下应尽量保持语义正确性。对网格对齐和拉伸性有严格要求的场景允许例外，如多列复杂表单。</p><h5 id="建议-标签的使用应尽量简洁，减少不必要的标签。"><a href="#建议-标签的使用应尽量简洁，减少不必要的标签。" class="headerlink" title="[建议] 标签的使用应尽量简洁，减少不必要的标签。"></a>[建议] 标签的使用应尽量简洁，减少不必要的标签。</h5><h4 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 属性</h4><h5 id="强制-属性名必须使用小写字母。"><a href="#强制-属性名必须使用小写字母。" class="headerlink" title="[强制] 属性名必须使用小写字母。"></a><code>[强制]</code> 属性名必须使用小写字母。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellSpacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="强制-属性值必须用双引号包围。"><a href="#强制-属性值必须用双引号包围。" class="headerlink" title="[强制] 属性值必须用双引号包围。"></a><code>[强制]</code> 属性值必须用双引号包围。</h5><p>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"esl.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'esl.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">esl.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-布尔类型的属性，建议不添加属性值。"><a href="#建议-布尔类型的属性，建议不添加属性值。" class="headerlink" title="[建议] 布尔类型的属性，建议不添加属性值。"></a>[建议] 布尔类型的属性，建议不添加属性值。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-自定义属性建议以-xxx-为前缀，推荐使用-data-。"><a href="#建议-自定义属性建议以-xxx-为前缀，推荐使用-data-。" class="headerlink" title="[建议] 自定义属性建议以 xxx- 为前缀，推荐使用 data-。"></a><code>[建议]</code> 自定义属性建议以 <code>xxx-</code> 为前缀，推荐使用 <code>data-</code>。</h5><p>解释：</p><p>使用前缀有助于区分自定义属性和标准定义的属性。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">data-ui-type</span>=<span class="string">"Select"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h3><hr><h4 id="3-1-DOCTYPE"><a href="#3-1-DOCTYPE" class="headerlink" title="3.1 DOCTYPE"></a>3.1 DOCTYPE</h4><h5 id="强制-使用-HTML5-的-doctype-来启用标准模式，建议使用大写的-DOCTYPE。"><a href="#强制-使用-HTML5-的-doctype-来启用标准模式，建议使用大写的-DOCTYPE。" class="headerlink" title="[强制] 使用 HTML5 的 doctype 来启用标准模式，建议使用大写的 DOCTYPE。"></a><code>[强制]</code> 使用 <code>HTML5</code> 的 <code>doctype</code> 来启用标准模式，建议使用大写的 <code>DOCTYPE</code>。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-启用-IE-Edge-模式。"><a href="#建议-启用-IE-Edge-模式。" class="headerlink" title="[建议] 启用 IE Edge 模式。"></a>[建议] 启用 IE Edge 模式。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-在-html-标签上设置正确的-lang-属性。"><a href="#建议-在-html-标签上设置正确的-lang-属性。" class="headerlink" title="[建议] 在 html 标签上设置正确的 lang 属性。"></a>[建议] 在 <code>html</code> 标签上设置正确的 <code>lang</code> 属性。</h5><p>解释：</p><p>有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-编码"><a href="#3-2-编码" class="headerlink" title="3.2 编码"></a>3.2 编码</h4><h5 id="强制-页面必须使用精简形式，明确指定字符编码。指定字符编码的-meta-必须是-head-的第一个直接子元素。"><a href="#强制-页面必须使用精简形式，明确指定字符编码。指定字符编码的-meta-必须是-head-的第一个直接子元素。" class="headerlink" title="[强制] 页面必须使用精简形式，明确指定字符编码。指定字符编码的 meta 必须是 head 的第一个直接子元素。"></a><code>[强制]</code> 页面必须使用精简形式，明确指定字符编码。指定字符编码的 <code>meta</code> 必须是 <code>head</code> 的第一个直接子元素。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-HTML-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-HTML-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] HTML 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] <code>HTML</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p><p><code>UTF-8</code> 编码具有更广泛的适应性。<code>BOM</code> 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h4 id="3-3-CSS-和-JavaScript-引入"><a href="#3-3-CSS-和-JavaScript-引入" class="headerlink" title="3.3 CSS 和 JavaScript 引入"></a>3.3 CSS 和 JavaScript 引入</h4><h5 id="强制-引入-CSS-时必须指明-rel-quot-stylesheet-quot-。"><a href="#强制-引入-CSS-时必须指明-rel-quot-stylesheet-quot-。" class="headerlink" title="[强制] 引入 CSS 时必须指明 rel=&quot;stylesheet&quot;。"></a><code>[强制]</code> 引入 <code>CSS</code> 时必须指明 <code>rel=&quot;stylesheet&quot;</code>。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"page.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-引入-CSS-和-JavaScript-时无须指明-type-属性。"><a href="#建议-引入-CSS-和-JavaScript-时无须指明-type-属性。" class="headerlink" title="[建议] 引入 CSS 和 JavaScript 时无须指明 type 属性。"></a>[建议] 引入 <code>CSS</code> 和 <code>JavaScript</code> 时无须指明 <code>type</code> 属性。</h5><p>解释：</p><p><code>text/css</code> 和 <code>text/javascript</code> 是 <code>type</code> 的默认值。</p><h4 id="建议-展现定义放置于外部-CSS-中，行为定义放置于外部-JavaScript-中。"><a href="#建议-展现定义放置于外部-CSS-中，行为定义放置于外部-JavaScript-中。" class="headerlink" title="[建议] 展现定义放置于外部 CSS 中，行为定义放置于外部 JavaScript 中。"></a>[建议] 展现定义放置于外部 <code>CSS</code> 中，行为定义放置于外部 <code>JavaScript</code> 中。</h4><p>解释：</p><p>结构-样式-行为的代码分离，对于提高代码的可阅读性和维护性都有好处。</p><h5 id="建议-在-head-中引入页面需要的所有-CSS-资源。"><a href="#建议-在-head-中引入页面需要的所有-CSS-资源。" class="headerlink" title="[建议] 在 head 中引入页面需要的所有 CSS 资源。"></a>[建议] 在 <code>head</code> 中引入页面需要的所有 <code>CSS</code> 资源。</h5><p>解释：</p><p>在页面渲染的过程中，新的CSS可能导致元素的样式重新计算和绘制，页面闪烁。</p><h5 id="建议-JavaScript-应当放在页面末尾，或采用异步加载。"><a href="#建议-JavaScript-应当放在页面末尾，或采用异步加载。" class="headerlink" title="[建议] JavaScript 应当放在页面末尾，或采用异步加载。"></a>[建议] <code>JavaScript</code> 应当放在页面末尾，或采用异步加载。</h5><p>解释：</p><p>将 <code>script</code> 放在页面中间将阻断页面的渲染。出于性能方面的考虑，如非必要，请遵守此条建议。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- a lot of elements --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"init-behavior.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。"><a href="#建议-移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。" class="headerlink" title="[建议] 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 URL 协议部分与页面相同，建议省略协议前缀。"></a>[建议] 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 <code>URL</code> 协议部分与页面相同，建议省略协议前缀。</h5><p>解释：</p><p>使用 <code>protocol-relative URL</code> 引入 CSS，在 <code>IE7/8</code> 下，会发两次请求。是否使用 <code>protocol-relative URL</code> 应充分考虑页面针对的环境。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//s1.bdstatic.com/cache/static/jquery-1.10.2.min_f2fb5194.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-head"><a href="#4-head" class="headerlink" title="4 head"></a>4 head</h3><hr><h4 id="4-1-title"><a href="#4-1-title" class="headerlink" title="4.1 title"></a>4.1 title</h4><h5 id="强制-页面必须包含-title-标签声明标题。"><a href="#强制-页面必须包含-title-标签声明标题。" class="headerlink" title="[强制] 页面必须包含 title 标签声明标题。"></a><code>[强制]</code> 页面必须包含 <code>title</code> 标签声明标题。</h5><h5 id="强制-title-必须作为-head-的直接子元素，并紧随-charset-声明之后。"><a href="#强制-title-必须作为-head-的直接子元素，并紧随-charset-声明之后。" class="headerlink" title="[强制] title 必须作为 head 的直接子元素，并紧随 charset 声明之后。"></a><code>[强制]</code> <code>title</code> 必须作为 <code>head</code> 的直接子元素，并紧随 <code>charset</code> 声明之后。</h5><p>解释：</p><p><code>title</code> 中如果包含 ASCII 之外的字符，浏览器需要知道字符编码类型才能进行解码，否则可能导致乱码。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-favicon"><a href="#4-2-favicon" class="headerlink" title="4.2 favicon"></a>4.2 favicon</h4><h5 id="强制-保证-favicon-可访问。"><a href="#强制-保证-favicon-可访问。" class="headerlink" title="[强制] 保证 favicon 可访问。"></a><code>[强制]</code> 保证 <code>favicon</code> 可访问。</h5><p>解释：</p><p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 <code>favicon.ico</code> 。为了保证 favicon 可访问，避免 404，必须遵循以下两种方法之一：</p><ol><li>在 Web Server 根目录放置 <code>favicon.ico</code> 文件。</li><li>使用 <code>link</code> 指定 favicon。</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"path/to/favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-viewport"><a href="#4-3-viewport" class="headerlink" title="4.3 viewport"></a>4.3 viewport</h4><h5 id="建议-若页面欲对移动设备友好，需指定页面的-viewport。"><a href="#建议-若页面欲对移动设备友好，需指定页面的-viewport。" class="headerlink" title="[建议] 若页面欲对移动设备友好，需指定页面的 viewport。"></a>[建议] 若页面欲对移动设备友好，需指定页面的 <code>viewport</code>。</h5><p>解释：</p><p>viewport meta tag 可以设置可视区域的宽度和初始缩放大小，避免在移动设备上出现页面展示不正常。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,minimum-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5 图片"></a>5 图片</h3><hr><h5 id="强制-禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。"><a href="#强制-禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。" class="headerlink" title="[强制] 禁止 img 的 src 取值为空。延迟加载的图片也要增加默认的 src。"></a><code>[强制]</code> 禁止 <code>img</code> 的 <code>src</code> 取值为空。延迟加载的图片也要增加默认的 <code>src</code>。</h5><p>解释：</p><p><code>src</code> 取值为空，会导致部分浏览器重新加载一次当前页面</p><h5 id="建议-避免为-img-添加不必要的-title-属性。"><a href="#建议-避免为-img-添加不必要的-title-属性。" class="headerlink" title="[建议] 避免为 img 添加不必要的 title 属性。"></a>[建议] 避免为 <code>img</code> 添加不必要的 <code>title</code> 属性。</h5><p>解释：</p><p>多余的 <code>title</code> 影响看图体验，并且增加了页面尺寸。</p><h5 id="建议-为重要图片添加-alt-属性。"><a href="#建议-为重要图片添加-alt-属性。" class="headerlink" title="[建议] 为重要图片添加 alt 属性。"></a>[建议] 为重要图片添加 <code>alt</code> 属性。</h5><p>解释：</p><p>可以提高图片加载失败时的用户体验。</p><h5 id="建议-添加-width-和-height-属性，以避免页面抖动。"><a href="#建议-添加-width-和-height-属性，以避免页面抖动。" class="headerlink" title="[建议] 添加 width 和 height 属性，以避免页面抖动。"></a>[建议] 添加 <code>width</code> 和 <code>height</code> 属性，以避免页面抖动。</h5><h5 id="建议-有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。"><a href="#建议-有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。" class="headerlink" title="[建议] 有下载需求的图片采用 img 标签实现，无下载需求的图片采用 CSS 背景图实现。"></a>[建议] 有下载需求的图片采用 <code>img</code> 标签实现，无下载需求的图片采用 CSS 背景图实现。</h5><p>解释：</p><ol><li>产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 <code>img</code> 形式实现，能方便用户下载。</li><li>无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 CSS 背景图实现。</li></ol><h3 id="6-表单"><a href="#6-表单" class="headerlink" title="6 表单"></a>6 表单</h3><hr><h4 id="6-1-控件标题"><a href="#6-1-控件标题" class="headerlink" title="6.1 控件标题"></a>6.1 控件标题</h4><h5 id="强制-有文本标题的控件必须使用-label-标签将其与其标题相关联。"><a href="#强制-有文本标题的控件必须使用-label-标签将其与其标题相关联。" class="headerlink" title="[强制] 有文本标题的控件必须使用 label 标签将其与其标题相关联。"></a><code>[强制]</code> 有文本标题的控件必须使用 <code>label</code> 标签将其与其标题相关联。</h5><p>解释：</p><p>有两种方式：</p><ol><li>将控件置于 <code>label</code> 内。</li><li><code>label</code> 的 <code>for</code> 属性指向控件的 <code>id</code>。</li></ol><p>推荐使用第一种，减少不必要的 <code>id</code>。如果 DOM 结构不允许直接嵌套，则应使用第二种。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"confirm"</span> <span class="attr">value</span>=<span class="string">"on"</span>&gt;</span> 我已确认上述条款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"textbox"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-按钮"><a href="#6-2-按钮" class="headerlink" title="6.2 按钮"></a>6.2 按钮</h4><h5 id="强制-使用-button-元素时必须指明-type-属性值。"><a href="#强制-使用-button-元素时必须指明-type-属性值。" class="headerlink" title="[强制] 使用 button 元素时必须指明 type 属性值。"></a><code>[强制]</code> 使用 <code>button</code> 元素时必须指明 <code>type</code> 属性值。</h5><p>解释：</p><p><code>button</code> 元素的默认 <code>type</code> 为 <code>submit</code>，如果被置于 <code>form</code> 元素中，点击后将导致表单提交。为显示区分其作用方便理解，必须给出 <code>type</code> 属性。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-尽量不要使用按钮类元素的-name-属性。"><a href="#建议-尽量不要使用按钮类元素的-name-属性。" class="headerlink" title="[建议] 尽量不要使用按钮类元素的 name 属性。"></a>[建议] 尽量不要使用按钮类元素的 <code>name</code> 属性。</h5><p>解释：</p><p>由于浏览器兼容性问题，使用按钮的 <code>name</code> 属性会带来许多难以发现的问题。具体情况可参考<a href="http://w3help.org/zh-cn/causes/CM2001" target="_blank" rel="noopener">此文</a>。</p><h4 id="6-3-可访问性-A11Y"><a href="#6-3-可访问性-A11Y" class="headerlink" title="6.3 可访问性 (A11Y)"></a>6.3 可访问性 (A11Y)</h4><h5 id="建议-负责主要功能的按钮在-DOM-中的顺序应靠前。"><a href="#建议-负责主要功能的按钮在-DOM-中的顺序应靠前。" class="headerlink" title="[建议] 负责主要功能的按钮在 DOM 中的顺序应靠前。"></a>[建议] 负责主要功能的按钮在 DOM 中的顺序应靠前。</h5><p>解释：</p><p>负责主要功能的按钮应相对靠前，以提高可访问性。如果在 CSS 中指定了 <code>float: right</code> 则可能导致视觉上主按钮在前，而 DOM 中主按钮靠后的情况。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.buttons .button-group &#123;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.buttons button &#123;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-当使用-JavaScript-进行表单提交时，如果条件允许，应使原生提交功能正常工作。"><a href="#建议-当使用-JavaScript-进行表单提交时，如果条件允许，应使原生提交功能正常工作。" class="headerlink" title="[建议] 当使用 JavaScript 进行表单提交时，如果条件允许，应使原生提交功能正常工作。"></a>[建议] 当使用 JavaScript 进行表单提交时，如果条件允许，应使原生提交功能正常工作。</h5><p>解释：</p><p>当浏览器 JS 运行错误或关闭 JS 时，提交功能将无法工作。如果正确指定了 <code>form</code> 元素的 <code>action</code> 属性和表单控件的 <code>name</code> 属性时，提交仍可继续进行。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-在针对移动设备开发的页面时，根据内容类型指定输入框的-type-属性。"><a href="#建议-在针对移动设备开发的页面时，根据内容类型指定输入框的-type-属性。" class="headerlink" title="[建议] 在针对移动设备开发的页面时，根据内容类型指定输入框的 type 属性。"></a>[建议] 在针对移动设备开发的页面时，根据内容类型指定输入框的 <code>type</code> 属性。</h5><p>解释：</p><p>根据内容类型指定输入框类型，能获得能友好的输入体验。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-多媒体"><a href="#7-多媒体" class="headerlink" title="7 多媒体"></a>7 多媒体</h3><hr><h5 id="建议-当在现代浏览器中使用-audio-以及-video-标签来播放音频、视频时，应当注意格式。"><a href="#建议-当在现代浏览器中使用-audio-以及-video-标签来播放音频、视频时，应当注意格式。" class="headerlink" title="[建议] 当在现代浏览器中使用 audio 以及 video 标签来播放音频、视频时，应当注意格式。"></a>[建议] 当在现代浏览器中使用 <code>audio</code> 以及 <code>video</code> 标签来播放音频、视频时，应当注意格式。</h5><p>解释：</p><p>音频应尽可能覆盖到如下格式：</p><ul><li>MP3</li><li>WAV</li><li>Ogg</li></ul><p>视频应尽可能覆盖到如下格式：</p><ul><li>MP4</li><li>WebM</li><li>Ogg</li></ul><h5 id="建议-在支持-HTML5-的浏览器中优先使用-audio-和-video-标签来定义音视频元素。"><a href="#建议-在支持-HTML5-的浏览器中优先使用-audio-和-video-标签来定义音视频元素。" class="headerlink" title="[建议] 在支持 HTML5 的浏览器中优先使用 audio 和 video 标签来定义音视频元素。"></a>[建议] 在支持 <code>HTML5</code> 的浏览器中优先使用 <code>audio</code> 和 <code>video</code> 标签来定义音视频元素。</h5><h5 id="建议-使用退化到插件的方式来对多浏览器进行支持。"><a href="#建议-使用退化到插件的方式来对多浏览器进行支持。" class="headerlink" title="[建议] 使用退化到插件的方式来对多浏览器进行支持。"></a>[建议] 使用退化到插件的方式来对多浏览器进行支持。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"audio.mp3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"audio.swf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"video.mp4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"video.swf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-只在必要的时候开启音视频的自动播放。"><a href="#建议-只在必要的时候开启音视频的自动播放。" class="headerlink" title="[建议] 只在必要的时候开启音视频的自动播放。"></a>[建议] 只在必要的时候开启音视频的自动播放。</h5><h5 id="建议-在-object-标签内部提供指示浏览器不支持该标签的说明。"><a href="#建议-在-object-标签内部提供指示浏览器不支持该标签的说明。" class="headerlink" title="[建议] 在 object 标签内部提供指示浏览器不支持该标签的说明。"></a>[建议] 在 <code>object</code> 标签内部提供指示浏览器不支持该标签的说明。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"something.swf"</span>&gt;</span>DO NOT SUPPORT THIS TAG<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-模板中的-HTML"><a href="#8-模板中的-HTML" class="headerlink" title="8 模板中的 HTML"></a>8 模板中的 HTML</h3><hr><h5 id="建议-模板代码的缩进优先保证-HTML-代码的缩进规则。"><a href="#建议-模板代码的缩进优先保证-HTML-代码的缩进规则。" class="headerlink" title="[建议] 模板代码的缩进优先保证 HTML 代码的缩进规则。"></a>[建议] 模板代码的缩进优先保证 HTML 代码的缩进规则。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line">&#123;if $display == true&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;/if&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line">&#123;if $display == true&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;/if&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-模板代码应以保证-HTML-单个标签语法的正确性为基本原则。"><a href="#建议-模板代码应以保证-HTML-单个标签语法的正确性为基本原则。" class="headerlink" title="[建议] 模板代码应以保证 HTML 单个标签语法的正确性为基本原则。"></a>[建议] 模板代码应以保证 HTML 单个标签语法的正确性为基本原则。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;if $item.type_id == $current_type&#125;focus&#123;/if&#125;"</span>&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> &#123;<span class="attr">if</span> $<span class="attr">item.type_id</span> == <span class="string">$current_type&#125;</span> <span class="attr">class</span>=<span class="string">"focus"</span>&#123;/<span class="attr">if</span>&#125;&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="建议-在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。"><a href="#建议-在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。" class="headerlink" title="[建议] 在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。"></a>[建议] 在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。</h5><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item_group&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;foreach $item_group as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;/foreach&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;if $item@iteration is div by 5&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;/if&#125;</span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;项目是以团队为单位，代码规范应同出一门&lt;/p&gt;
&lt;p&gt;本文档的目标是使 HTML 代码风格
      
    
    </summary>
    
      <category term="总结" scheme="https://github.com/taokiang/blog/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Hexo搭建博客并部署到Github Pages</title>
    <link href="https://github.com/taokiang/blog/2018/08/27/2018-8-27-1/"/>
    <id>https://github.com/taokiang/blog/2018/08/27/2018-8-27-1/</id>
    <published>2018-08-27T02:23:12.120Z</published>
    <updated>2018-08-27T05:47:18.865Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="获取Github-Pages"><a href="#获取Github-Pages" class="headerlink" title="获取Github Pages"></a>获取Github Pages</h2><hr><ol><li>去Github官网注册账号</li><li>新建一个repo，注意名称一定是<code>your_username.github.io</code>这样的格式。比如你的用户名为zhangsan，<code>Repository name</code>里面就填上<code>zhangsan.github.io</code></li><li>进入刚新建的仓库，点击<code>Setting</code>，一直拖到最下面，选择<code>Automatic Page Generator</code>，随便选个主题然后发布即可。<br><br><br>详细步骤见这个<a href="http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html" title="博客" target="_blank" rel="noopener">博客</a><br><br><h2 id="Hexo搭建静态博客"><a href="#Hexo搭建静态博客" class="headerlink" title="Hexo搭建静态博客"></a>Hexo搭建静态博客</h2></li></ol><hr><p>hexo是一款基于Node.js的静态博客框架，Github官方推荐的是Jekyll。对比了下，大多认为hexo比较简单，于是我选择了它。我们需要安装如下软件</p><ul><li><a href="http://nodejs.cn/" title="Node.js" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://desktop.github.com/" title="Github for windows" target="_blank" rel="noopener">Github for windows</a><br><br><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3>使用Github for windows首次登录时就自动在本地生成了密钥，并远程添加到了Github。自动配置好SSH还是很省事的。<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3>详细步骤见iHTCboy的简书以及岁月如歌的博客。我是跟着他们写的一步步来的，别人说的很详细的我也没必要再重复。我粗略写下来只是为了记录个人学习过程。<br><br><br>打开Git Shell，cd到你想搭建博客的路径，比如<code>D:\My Documents\GitHub\blog</code>。依次输入<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  #安装hexo</span><br><span class="line">hexo init                # 初始化，安装所需包</span><br><span class="line">npm install              # 其实此句不是必须，新版本的Hexo在初始化时就安装好了依赖包)</span><br><span class="line">hexo g                   # 生成</span><br><span class="line">hexo s                   # 运行</span><br></pre></td></tr></table></figure></li></ul><p>然后在浏览器输入<code>localhost:4000</code>就能在本地预览我们新搭建的博客了。hexo的常用指令不多，主要如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo n          # 新建文章，在\source\_posts文件夹里</span><br><span class="line">hexo new page   # 新建页面，比如想在导航栏新增一个“关于我”的页面</span><br><span class="line">hexo clean      # 清除本地的数据库和生成的public文件夹</span><br><span class="line">hexo g          # 生成博客文件</span><br><span class="line">hexo s          # 运行在本地浏览器，可当预览使用</span><br><span class="line">hexo d          # 部署博客到Github等</span><br></pre></td></tr></table></figure></p><p>注意所有命令需要在cd后的新路径中进行</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>键入<code>hexo n &quot;name&quot;</code>即可在<code>\source\_posts</code>文件夹里生成<code>name.md</code>的Markdown文件，文件结构如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: HelloWorld！ # 文章页面上的显示名称，可以任意修改，不会出现在URL中</span><br><span class="line">date: 2015-11-09 15:56:26 # 文章生成时间，一般不改</span><br><span class="line">categories:   # 文章分类目录，参数可省略</span><br><span class="line">    - 随笔 # 此为一级目录</span><br><span class="line">    - 瞬间 # 此为二级目录</span><br><span class="line">    - 关于 # 此为三级目录</span><br><span class="line">tags:   # 文章标签，参数可省略</span><br><span class="line">    - hexo</span><br><span class="line">    - blog # 个数不限，单个可直接跟在tags后面</span><br><span class="line">---</span><br><span class="line">这里开始是正文</span><br></pre></td></tr></table></figure></p><p>如果想生成的文件默认带categories，那么打开根目录下<code>\scaffolds\post.md</code>新增一行<code>categories :</code>就修改好了模板文件。如果想在主页中以摘要形式显示你的文章，要么正文中加入<code>&lt;!--more--&gt;</code>即可屏蔽该语句下面的内容</p><h3 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h3><p>在根目录下<code>_config.yml</code>里面任意位置新增以下语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  # 填上你自己的仓库名，注意后面有`.git`</span><br><span class="line">  repository: git@github.com:your_username/your_username.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><ul><li>最好不要采用http形式的如<code>https://github.com/your_username/your_username.github.io.git</code>而采用SSH换版本的<a href="mailto:`git@github.com">`git@github.com</a>:your_username/your_username.github.io.git<code>，如下图点击</code>Use SSH`后再复制。</li></ul><p><img src="https://taokiang.github.io/blog/2018/08/27/2018-8-27-1/hexo部署到github_360反馈意见截图16270904308053.png" alt="hexo部署到github_360"></p><ul><li>所有冒号后面必须键入一个空格</li></ul><p>好了现在可以部署到Github了。输入<code>npm install hexo-deployer-git --save</code>，然后再执行<code>hexo d</code>来部署。否则会出现<code>Deployer not found:git</code>的错误。耐心等待，出现<code>Deployer done: git</code>表示你部署成功了！输入网址<code>your_username.github.io</code>去看看吧。一般来说如果出现莫名的问题，按照以下步骤即可解决。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除.deploy_git文件夹</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><h3 id="个性化你的博客"><a href="#个性化你的博客" class="headerlink" title="个性化你的博客"></a>个性化你的博客</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>在根目录<code>_config.yml</code>里进行全局配置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: 海之声 #主页标题</span><br><span class="line">subtitle: 参差多态乃是幸福本源 #副标题</span><br><span class="line">description: 参差多态乃是幸福本源 # 网站描述，可以加一句自己喜欢的座右铭</span><br><span class="line">author: haiyusun #作者，左下角显示</span><br><span class="line">avatar: /images/avatar.jpg #设置头像，放在\themes\next\source\images里</span><br><span class="line">language: zh-Hans # 选择中文简体</span><br><span class="line">timezone:</span><br><span class="line">since: 2016 #建站日期，左下角显示</span><br><span class="line"></span><br><span class="line"># 多说 ShortName</span><br><span class="line">duoshuo_shortname: your_username # 多说评论，后面填写用户名</span><br><span class="line"># 百度分析</span><br><span class="line">baidu_analytics: your_id # 填写自己获得的id</span><br><span class="line"></span><br><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  Github: https://github.com/haiyusun</span><br><span class="line">  Email: mailto:haiyu19931121@163.com</span><br><span class="line"></span><br><span class="line"># title, chinese available</span><br><span class="line">links_title: 友情链接</span><br><span class="line"># links</span><br><span class="line">links:</span><br><span class="line">  我的简书: http://www.jianshu.com/users/4943cb2c6ea4</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class="line">url: http://haiyusun.github.io/ #填自己的github pages网址</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"># 本地搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line"># 语法高亮</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"># 百度网站地图</span><br><span class="line">plugins:</span><br><span class="line">baidusitemap: # 需要安装插件 npm install hexo-generator-baidu-sitemap@0.1.1 --save</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"># 主题切换</span><br><span class="line">theme: next</span><br><span class="line"># RSS订阅</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 0</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:your-username/haiyusun.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line"># ---------------下面选项需要对应插件的支持---------------</span><br><span class="line"># npm install hexo-generator-index --save</span><br><span class="line"># npm install hexo-generator-archive --save</span><br><span class="line"># npm install hexo-generator-category --save</span><br><span class="line"># npm install hexo-generator-tag --save</span><br><span class="line"></span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 10 ##首页默认10篇文章标题 如果值为0不分页</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 20 ##归档页面默认20篇文章标题</span><br><span class="line">  yearly: true  ##生成年视图</span><br><span class="line">  monthly: true ##生成月视图</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10 ##标签分类页面默认10篇文章</span><br><span class="line"></span><br><span class="line">category_generator:</span><br><span class="line">  per_page: 10 ###分类页面默认10篇文章</span><br></pre></td></tr></table></figure></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>自带的landscape主题不太好看，我选了NexT。将其克隆到本地，在根目录下theme文件夹下新建next文件夹，把刚才下载的全放进去，然后在根目录<code>_config.yml</code>里找到<code>theme: landscape</code>将其替换成next即启用该主题。官方给出的NexT主题使用教程十分详细，建议先看看，配合着岁月如歌的博客应该能做出效果不错的个人博客了。至此我们的博客就带有RSS订阅、百度统计、来访/阅读次数统计、网站地图、评论系统、分享服务、本地搜索等功能了。</p><p>以下针对我自己的问题作个记录。</p><h3 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h3><h4 id="新增导航"><a href="#新增导航" class="headerlink" title="新增导航"></a>新增导航</h4><p>默认导航栏只有首页、归档、标签、分类四项。如果想增加其他如C++、随笔等。需要打开<code>\themes\next\_config.yml</code>找到如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  archives: /archives</span><br><span class="line">  # 这里是新增的，程序猿是一级目录，C是二级目录，同理随笔是一级目录</span><br><span class="line">  c++: /categories/程序猿/C/</span><br><span class="line">  python: /categories/程序猿/Python/</span><br><span class="line">  essay: /categories/随笔/</span><br><span class="line">  # 注意这里没有/categories</span><br><span class="line">  about: /about</span><br></pre></td></tr></table></figure></p><p>假如我想新建C++、Python、随笔三个导航按钮，并且打开他们的效果如下图。<br><img src="https://taokiang.github.io/blog/2018/08/27/2018-8-27-1/hexo部署到github_360反馈意见截图161908239992124.png" alt="hexo部署到github_360"></p><p>需要注意的是前面要加上<code>/categories</code>，格式是这样<code>python: /categories/</code>这里是文章的一级目录/这里是文章的二级目录/。结尾要加上/分隔符。这几个页面是不需要通过<code>hexo new page</code>来生成的。关于导航栏及侧栏所用的图标来自fontawesome。在<code>\themes\next\_config.yml</code>里配置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 导航栏的图标，输入网站内图标的对应单词</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  c++: keyboard-o</span><br><span class="line">  python: keyboard-o</span><br><span class="line">  essay: pencil</span><br><span class="line">  commonweal: heartbeat</span><br><span class="line">  # 社交网络图标</span><br><span class="line">  social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  GitHub: github</span><br><span class="line">  Email: envelope</span><br></pre></td></tr></table></figure><p>写文章的时候只要分类目录对应就可以被正确归类到导航栏里。如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Python爬虫初学（三）—— 模拟登录知乎</span><br><span class="line">date: 2016-09-18 17:10:59</span><br><span class="line"># 对应于/categories/程序猿/Python/</span><br><span class="line">categories:</span><br><span class="line">    - 程序猿</span><br><span class="line">    - Python</span><br><span class="line">tags:</span><br><span class="line">    - Python</span><br><span class="line">    - 爬虫</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h4 id="新增关于我页面"><a href="#新增关于我页面" class="headerlink" title="新增关于我页面"></a>新增关于我页面</h4><p>这个需要<code>hexo new page &quot;about&quot;</code>生成一个新页面，menu里面新增<code>about: /about</code>。在新增的about文件夹可以看到<code>index.md</code>，对其直接编辑就可，注意不要对此文件加tags和 categories，否则会出错。</p><h3 id="公益404页面"><a href="#公益404页面" class="headerlink" title="公益404页面"></a>公益404页面</h3><p>HTTP 404或Not Found错误信息是HTTP的其中一种“标准回应信息”（HTTP状态码），此信息代表客户端在浏览网页时，服务器无法正常提供信息，或是服务器无法回应且不知原因。</p><p>按照NexT主题使用教程添加404页面对我来说好像不可用。在知乎的这个回答中复制了某匿名用户的的代码，拷贝到<code>\themes\next\source\404.html</code>可行。代码如下，其中重定向链接改成你自己的主页，还可以自定义背景图片。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        *&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">outline</span>:none;<span class="attribute">font-family</span>:\<span class="number">5</span>FAE\<span class="number">8</span>F6F\<span class="number">96</span>C5\<span class="number">9</span>ED1,ו;<span class="attribute">-webkit-user-select</span>:none;<span class="attribute">-moz-user-select</span>:none;<span class="attribute">-ms-user-select</span>:none;<span class="attribute">-khtml-user-select</span>:none;<span class="attribute">user-select</span>:none;<span class="attribute">cursor</span>:default;<span class="attribute">font-weight</span>:lighter;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.center</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.whole</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">line-height</span>:<span class="number">100%</span>;<span class="attribute">position</span>:fixed;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">z-index</span>:-<span class="number">1000</span>;<span class="attribute">overflow</span>:hidden;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.whole</span> <span class="selector-tag">img</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mask</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">background</span>:<span class="number">#000</span>;<span class="attribute">opacity</span>:<span class="number">0.6</span>;<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=60);&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.b</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">text-align</span>:center;<span class="attribute">height</span>:<span class="number">400px</span>;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">margin-top</span>:-<span class="number">230px</span>&#125;<span class="selector-class">.a</span>&#123;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">margin-top</span>:<span class="number">30px</span>&#125;<span class="selector-class">.a</span> <span class="selector-tag">a</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">150px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">text-align</span>:center;<span class="attribute">line-height</span>:<span class="number">50px</span>;<span class="attribute">font-size</span>:<span class="number">18px</span>;<span class="attribute">border-radius</span>:<span class="number">25px</span>;<span class="attribute">color</span>:<span class="number">#333</span>&#125;<span class="selector-class">.a</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>;<span class="attribute">box-shadow</span>:<span class="number">#fff</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">margin-top</span>:<span class="number">40px</span>;<span class="attribute">font-size</span>:<span class="number">24px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#num</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>;<span class="attribute">font-weight</span>:bold;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.plan</span>&#123;<span class="attribute">color</span>: black;<span class="attribute">background</span>: white;<span class="attribute">font-size</span>: <span class="number">30px</span>; <span class="attribute">margin-top</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.plan</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: white;<span class="attribute">background</span>: black;<span class="attribute">font-size</span>: <span class="number">30px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#gg</span> &#123;</span></span><br><span class="line"><span class="undefined">               position: absolute;</span></span><br><span class="line"><span class="undefined">    width: 654px;</span></span><br><span class="line"><span class="undefined">    height: 470px;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    margin-left: -377px;</span></span><br><span class="line"><span class="undefined">    margin-top: -235px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"redirect();"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gg"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以下网址为益播生成的404页面--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">iframe</span>   <span class="attr">class</span>=<span class="string">"gg"</span> <span class="attr">scrolling</span>=<span class="string">'no'</span> <span class="attr">frameborder</span>=<span class="string">'0'</span> <span class="attr">src</span>=<span class="string">'https://yibo.iyiyun.com/Home/Distribute/ad404/1182245'</span> <span class="attr">width</span>=<span class="string">'654'</span> <span class="attr">height</span>=<span class="string">'470'</span> <span class="attr">style</span>=<span class="string">'display:block;'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whole"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里是自定义图片的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://obvjfxxhr.bkt.clouddn.com/404.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如图</p><h3 id="继续美化博客"><a href="#继续美化博客" class="headerlink" title="继续美化博客"></a>继续美化博客</h3><h4 id="修改文章宽度"><a href="#修改文章宽度" class="headerlink" title="修改文章宽度"></a>修改文章宽度</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">如何修改文章宽度？</span><br><span class="line"></span><br><span class="line">\themes\next\source\css\_common\components\post\post-expand.styl</span><br><span class="line"></span><br><span class="line">@media (max-width: 767px)</span><br><span class="line">改为：</span><br><span class="line">@media (max-width: 1280px)</span><br><span class="line">\themes\next\source\css\ _variables\base.styl中：</span><br><span class="line"></span><br><span class="line">$main-desktop = 960px</span><br><span class="line">$content-desktop = 700px</span><br><span class="line">改成：</span><br><span class="line">$main-desktop = 1280px</span><br><span class="line">$content-desktop = 960px</span><br></pre></td></tr></table></figure><p>我个人觉得这个又太宽了。于是改成@media (max-width: 1080px)、$main-desktop = 1080px、<br>$content-desktop = 810px，可凭喜好自己修改。我设置的文章宽度如下<br><img src="https://taokiang.github.io/blog/2018/08/27/2018-8-27-1/hexo部署到github_360反馈意见截图16250103569193.png" alt="hexo部署到github_360"></p><h4 id="配色与字体"><a href="#配色与字体" class="headerlink" title="配色与字体"></a>配色与字体</h4><p>继续在<code>\themes\next\source\css\ _variables\base.styl</code>折腾。</p><h4 id="字号与行高"><a href="#字号与行高" class="headerlink" title="字号与行高"></a>字号与行高</h4><p>字号默认14px，虽然是主流，我个人觉得还是太小了点，看多了眼睛难受，设置成16px好多了。<br>找到<code>$font-size-base = 14px</code>，修改即可。该主题默认行高2.0，移动设备访问可见行高过高，找到<code>$line-height-base = 2</code>。修改成1.8个人觉得最为合适。至于代码块的字体，默认的13px确实有点小了。不过最好不要修改，否则会出现糟糕的滚动条</p><h4 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h4><p>主要是修改网页背景色，修改超链接颜色。自定义颜色见<a href="http://www.114la.com/other/rgb.htm" title="颜色表" target="_blank" rel="noopener">颜色表</a>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Variables</span><br><span class="line">// =================================================</span><br><span class="line">// Colors</span><br><span class="line">// colors for use across theme.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$whitesmoke   = #f5f5f5</span><br><span class="line">$gainsboro    = #eee</span><br><span class="line">$mycolor     = #EEE5DE</span><br><span class="line">$gray-lighter = #ddd</span><br><span class="line">$grey-light   = #ccc</span><br><span class="line">$grey         = #bbb</span><br><span class="line">$grey-dark    = #999</span><br><span class="line">$grey-dim     = #666</span><br><span class="line">$black-light  = #555</span><br><span class="line">$black-dim    = #333</span><br><span class="line">$black-deep   = #222</span><br><span class="line">$red          = #ff2a2a</span><br><span class="line">$blue-bright  = #87daff</span><br><span class="line">$blue         = #0684bd</span><br><span class="line">// 这是我自定义的颜色</span><br><span class="line">$myblue    = #4682B4   </span><br><span class="line">$blue-deep    = #262a30</span><br><span class="line">$orange       = #fc6423</span><br><span class="line">$mylink      = #36648B</span><br><span class="line"></span><br><span class="line">// Scaffolding</span><br><span class="line">// Settings for some of the most global styles.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">// Global text color on <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$text-color                   = $black-deep</span><br><span class="line">// 修改超链接颜色</span><br><span class="line">// Global link color.</span><br><span class="line">$link-color                   = $myblue</span><br><span class="line">$link-hover-color             = $mylink</span><br><span class="line">$link-decoration-color        = $gray-lighter </span><br><span class="line">$link-decoration-hover-color  = $mylink</span><br><span class="line"></span><br><span class="line">// Global border color.</span><br><span class="line">$border-color                 = $black-light</span><br><span class="line"></span><br><span class="line">// Background color for <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">// 背景色，默认white，我认为太刺眼就换成了烟灰色</span><br><span class="line">$body-bg-color                = whitesmoke</span><br><span class="line">// 鼠标选择区域</span><br><span class="line">// Selection</span><br><span class="line">$selection-bg                 = $blue-deep</span><br><span class="line">$selection-color              = white</span><br></pre></td></tr></table></figure></p><p>至此博客搭建完成。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;获取Github-Pages&quot;&gt;&lt;a href=&quot;#获取Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;获取Github Pages&quot;&gt;&lt;/a&gt;获取Github Pages&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="小知识" scheme="https://github.com/taokiang/blog/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-cli搭建项目时，assets和static的区别</title>
    <link href="https://github.com/taokiang/blog/2018/08/23/2018-8-23-1/"/>
    <id>https://github.com/taokiang/blog/2018/08/23/2018-8-23-1/</id>
    <published>2018-08-23T09:51:32.257Z</published>
    <updated>2018-08-27T05:50:17.663Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="Webpacked-Assets"><a href="#Webpacked-Assets" class="headerlink" title="Webpacked Assets"></a>Webpacked Assets</h2><hr><p>为了回答这个问题，我们首先需要了解Webpack如何处理静态资产。在 *.vue 组件中，所有模板和CSS都会被 vue-html-loader 及 css-loader 解析，并查找资源URL。例如，在 <code>&lt;img src=&quot;./logo.png&quot;&gt;</code><br>和 <code>background: url(./logo.png)</code> 中，<code>&quot;./logo.png&quot;</code> 是相对的资源路径，将由Webpack解析为模块依赖。</p><p>因为 logo.png 不是 JavaScript，当被视为模块依赖时，需要使用 url-loader 和 file-loader<br>处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。</p><p>由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将<br>Webpack 处理的静态资源放在 /src 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 /src/assets：可以用模块/组件的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。<br><br></p><h2 id="“Real”-Static-Assets"><a href="#“Real”-Static-Assets" class="headerlink" title="“Real” Static Assets"></a>“Real” Static Assets</h2><hr><p>相比之下，static/ 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终目录（默认是dist/static）下。必须使用绝对路径引用这些文件，这是通过在 config.js 文件中的 build.assetsPublicPath 和 build.assetsSubDirectory 连接来确定的。</p><p>任何放在 static/ 中文件需要以绝对路径的形式引用：/static/[filename]。如果更改 assetSubDirectory 的值为 assets，那么路径需改为 /assets/[filename]。<br><br><br>请参考vue-cli作者的解释：<a href="http://vuejs-templates.github.io/webpack/static.html" title=" webpack 模板的文档 - Handing Static Assets" target="_blank" rel="noopener">http://vuejs-templates.github.io/webpack/static.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Webpacked-Assets&quot;&gt;&lt;a href=&quot;#Webpacked-Assets&quot; class=&quot;headerlink&quot; title=&quot;Webpacked Assets&quot;&gt;&lt;/a&gt;Webpacked Assets&lt;/h2&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/taokiang/blog/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>ajax-post请求请求跨域，服务端解决方案</title>
    <link href="https://github.com/taokiang/blog/2018/08/10/2018-8-10-1/"/>
    <id>https://github.com/taokiang/blog/2018/08/10/2018-8-10-1/</id>
    <published>2018-08-10T01:08:56.610Z</published>
    <updated>2018-08-27T05:47:15.973Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><p><img src="https://taokiang.github.io/blog/2018/08/10/2018-8-10-1/access.png" alt="123"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://taokiang.github.io/blog/2018/08/10/2018-8-10-1/access.png&quot; alt=&quot;123&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="小知识" scheme="https://github.com/taokiang/blog/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>常用pc分辨率统计图</title>
    <link href="https://github.com/taokiang/blog/2018/07/18/2018-7-18-1/"/>
    <id>https://github.com/taokiang/blog/2018/07/18/2018-7-18-1/</id>
    <published>2018-07-18T06:24:08.000Z</published>
    <updated>2018-08-27T05:49:46.128Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><p><img src="https://taokiang.github.io/blog/2018/07/18/2018-7-18-1/pc_size.jpg" alt="常用pc分辨率"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://taokiang.github.io/blog/2018/07/18/2018-7-18-1/pc_size.jpg&quot; alt=&quot;常用pc分辨率&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="小知识" scheme="https://github.com/taokiang/blog/categories/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue-cli项目开发、生产地址配置</title>
    <link href="https://github.com/taokiang/blog/2018/06/28/2018-6-28-2/"/>
    <id>https://github.com/taokiang/blog/2018/06/28/2018-6-28-2/</id>
    <published>2018-06-28T07:07:11.920Z</published>
    <updated>2018-09-18T02:35:39.867Z</updated>
    
    <content type="html"><![CDATA[<p><br><br>基本上所有的项目，在测试的时候和正式发布的时候根地址是不一样的，我们可以利用的WebPack给生产环境和正式环境配置不同地址<br><br><br>pro.env.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"//10.138.60.142:7000"'</span> <span class="comment">//生产地址(新增配置)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dev.env.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">var</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"/development"'</span> <span class="comment">//开发地址(新增配置)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>配置index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">'./prod.env'</span>),<span class="comment">//(新增配置)</span></span><br><span class="line">    <span class="comment">// ....... //</span></span><br><span class="line">  &#125;,</span><br><span class="line">  dev: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),<span class="comment">//(新增配置)</span></span><br><span class="line">    <span class="comment">// ....... //</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = process.env.API_ROOT</span><br></pre></td></tr></table></figure></p><p>以上在不同的环境中会取到不同的地址</p><p><br></p><blockquote><p>作者：仇江涛</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;基本上所有的项目，在测试的时候和正式发布的时候根地址是不一样的，我们可以利用的WebPack给生产环境和正式环境配置不同地址&lt;br&gt;&lt;br&gt;&lt;br&gt;pro.env.js：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/taokiang/blog/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>a标签实现发短信功能(苹果、安卓的兼容)</title>
    <link href="https://github.com/taokiang/blog/2018/06/28/2018-6-28-1/"/>
    <id>https://github.com/taokiang/blog/2018/06/28/2018-6-28-1/</id>
    <published>2018-06-28T03:01:57.448Z</published>
    <updated>2018-08-27T05:49:20.479Z</updated>
    
    <content type="html"><![CDATA[<p><br><br>安卓系统上面的写法是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086?body=你好Android"</span>&gt;</span>给 10086 发短信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>IOS系统上面的写法是：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086&amp;body=你好iphone"</span>&gt;</span>给 10086 发短信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><blockquote><p>作者：仇江涛</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;安卓系统上面的写法是：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cl
      
    
    </summary>
    
      <category term="html" scheme="https://github.com/taokiang/blog/categories/html/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue2在低版本app，显示空白</title>
    <link href="https://github.com/taokiang/blog/2018/06/27/2018-6-27-1/"/>
    <id>https://github.com/taokiang/blog/2018/06/27/2018-6-27-1/</id>
    <published>2018-06-27T07:54:48.110Z</published>
    <updated>2018-09-17T13:02:17.050Z</updated>
    
    <content type="html"><![CDATA[<p><br><br>这是由于IE对promise的支持不好，我们需要安装：babel-polyfill和es6-promise:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br><span class="line">npm install es6-promise --save</span><br><span class="line">npm install --save babel-preset-es2015</span><br></pre></td></tr></table></figure></p><p><br><br>main.js文件中引用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Es6Promise <span class="keyword">from</span> <span class="string">'es6-promise'</span></span><br><span class="line">Es6Promise.polyfill()</span><br></pre></td></tr></table></figure></p><p><br><br>build/webpack.base.conf.js 文件中配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     entry: &#123;</span><br><span class="line">       app: [<span class="string">"babel-polyfill"</span>, <span class="string">"./src/main.js"</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">  &#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line"><span class="comment">//include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')],</span></span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,<span class="comment">//除了node_modules文件夹以外的，均使用babel-loader转换</span></span><br><span class="line">query: &#123;</span><br><span class="line">  presets: [<span class="string">'es2015'</span>]</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><br><br>.babelrc 文件中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;modules&quot;: false,</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;es2015&quot;,</span><br><span class="line">    &quot;stage-2&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-vue-jsx&quot;, &quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><blockquote><p>作者：仇江涛</p></blockquote><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;这是由于IE对promise的支持不好，我们需要安装：babel-polyfill和es6-promise:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/taokiang/blog/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>css属性被删除，样式不兼容</title>
    <link href="https://github.com/taokiang/blog/2018/06/27/2018-6-27-2/"/>
    <id>https://github.com/taokiang/blog/2018/06/27/2018-6-27-2/</id>
    <published>2018-06-27T07:54:48.110Z</published>
    <updated>2018-09-18T02:26:45.018Z</updated>
    
    <content type="html"><![CDATA[<p><br><br>vue-cli打包后，框架集成的autoprefixer插件会自动删除未兼容到的浏览器的css前缀，导致不兼容</p><h5 id="package-json-文件中配置如下："><a href="#package-json-文件中配置如下：" class="headerlink" title="package.json 文件中配置如下："></a>package.json 文件中配置如下：</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"&gt; 1%"</span>,//全球有超过<span class="number">1</span>%的人使用的浏览器</span><br><span class="line">    <span class="string">"last 2 versions"</span>,//每个浏览器的最后<span class="number">2</span>个版本</span><br><span class="line">    <span class="string">"last 10 Chrome versions"</span>,//Chrome浏览器的最后<span class="number">10</span>个版本</span><br><span class="line">    <span class="string">"last 5 Firefox versions"</span>,//Firefox浏览器的最后<span class="number">5</span>个版本</span><br><span class="line">    <span class="string">"Safari &gt;= 6"</span>,//Safari浏览器<span class="number">6</span>以上的版本</span><br><span class="line">    <span class="string">"ie &gt; 8"</span>//ie8以上的版本</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>作者：仇江涛</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;vue-cli打包后，框架集成的autoprefixer插件会自动删除未兼容到的浏览器的css前缀，导致不兼容&lt;/p&gt;
&lt;h5 id=&quot;package-json-文件中配置如下：&quot;&gt;&lt;a href=&quot;#package-json-文件中配置如下：&quot; class
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/taokiang/blog/categories/vue/"/>
    
    
  </entry>
  
</feed>
